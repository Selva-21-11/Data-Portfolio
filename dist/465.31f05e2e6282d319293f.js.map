{"version":3,"file":"465.31f05e2e6282d319293f.js","mappings":"gJA2CO,SAASA,EAASC,EAAKC,EAAGC,GAC7B,IAAIC,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPM,EAAKL,EAAE,GACPM,EAAKN,EAAE,GACPO,EAAKP,EAAE,GACPQ,EAAKR,EAAE,GAMX,OAJAF,EAAI,GAAKG,EAAKO,EAAKJ,EAAKC,EAAKH,EAAKK,EAAKJ,EAAKG,EAC5CR,EAAI,GAAKI,EAAKM,EAAKJ,EAAKE,EAAKH,EAAKE,EAAKJ,EAAKM,EAC5CT,EAAI,GAAKK,EAAKK,EAAKJ,EAAKG,EAAKN,EAAKK,EAAKJ,EAAKG,EAC5CP,EAAI,GAAKM,EAAKI,EAAKP,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EACrCT,CACX,CAoRO,MAAM,ECrUN,SAAcA,EAAKC,GAKtB,OAJAD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACJD,CACX,ED4Ua,EChUN,SAAaA,EAAKW,EAAGC,EAAGC,EAAGC,GAK9B,OAJAd,EAAI,GAAKW,EACTX,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACFd,CACX,ED0Va,EC5QN,SAAaC,EAAGC,GACnB,OAAOD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,EAC9D,EDwSa,ECjUN,SAAmBF,EAAKC,GAC3B,IAAIU,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACNa,EAAIb,EAAE,GACNc,EAAMJ,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EAQtC,OAPIC,EAAM,IACNA,EAAM,EAAIC,KAAKC,KAAKF,IAExBf,EAAI,GAAKW,EAAII,EACbf,EAAI,GAAKY,EAAIG,EACbf,EAAI,GAAKa,EAAIE,EACbf,EAAI,GAAKc,EAAIC,EACNf,CACX,ECpGO,MAAMkB,UAAaC,MACtB,WAAAC,CAAYT,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,GACjCO,MAAMV,EAAGC,EAAGC,EAAGC,GACfQ,KAAKC,SAAW,OAGhBD,KAAKE,QAAUF,KAGf,MAAMG,EAAe,CAAC,IAAK,IAAK,IAAK,KACrC,OAAO,IAAIC,MAAMJ,KAAM,CACnB,GAAAK,CAAIC,EAAQC,GACR,MAAMC,EAAUC,QAAQJ,OAAOK,WAE/B,OADIF,GAAWL,EAAaQ,SAASJ,IAAWD,EAAOL,WAChDO,CACX,GAER,CAEA,KAAInB,GACA,OAAOW,KAAK,EAChB,CAEA,KAAIV,GACA,OAAOU,KAAK,EAChB,CAEA,KAAIT,GACA,OAAOS,KAAK,EAChB,CAEA,KAAIR,GACA,OAAOQ,KAAK,EAChB,CAEA,KAAIX,CAAEuB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,KAAIX,CAAEsB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,KAAIV,CAAEqB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,KAAIT,CAAEoB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,QAAAY,GFjDG,IAAkBnC,EEoDjB,OFpDiBA,EEkDCsB,KAAKE,SFjDvB,GAAK,EACTxB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EE+CLsB,KAAKC,WACED,IACX,CAEA,GAAAK,CAAIhB,EAAGC,EAAGC,EAAGC,GACT,OAAIH,EAAEyB,OAAed,KAAKe,KAAK1B,IAC/B,EAAaW,KAAKE,QAASb,EAAGC,EAAGC,EAAGC,GACpCQ,KAAKC,WACED,KACX,CAEA,OAAAgB,CAAQrC,GAGJ,OFLD,SAAiBD,EAAKC,EAAGsC,GAC5BA,GAAO,GAEP,IAAIpC,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPM,EAAKS,KAAKwB,IAAID,GACd7B,EAAKM,KAAKyB,IAAIF,GAElBvC,EAAI,GAAKG,EAAKO,EAAKJ,EAAKC,EACxBP,EAAI,GAAKI,EAAKM,EAAKL,EAAKE,EACxBP,EAAI,GAAKK,EAAKK,EAAKN,EAAKG,EACxBP,EAAI,GAAKM,EAAKI,EAAKP,EAAKI,CAE5B,CEZQ,CAAiBe,KAAKE,QAASF,KAAKE,QAASvB,GAC7CqB,KAAKC,WACED,IACX,CAEA,OAAAoB,CAAQzC,GAGJ,OFcD,SAAiBD,EAAKC,EAAGsC,GAC5BA,GAAO,GAEP,IAAIpC,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPO,EAAKQ,KAAKwB,IAAID,GACd7B,EAAKM,KAAKyB,IAAIF,GAElBvC,EAAI,GAAKG,EAAKO,EAAKL,EAAKG,EACxBR,EAAI,GAAKI,EAAKM,EAAKJ,EAAKE,EACxBR,EAAI,GAAKK,EAAKK,EAAKP,EAAKK,EACxBR,EAAI,GAAKM,EAAKI,EAAKN,EAAKI,CAE5B,CE/BQ,CAAiBc,KAAKE,QAASF,KAAKE,QAASvB,GAC7CqB,KAAKC,WACED,IACX,CAEA,OAAAqB,CAAQ1C,GAGJ,OFiCD,SAAiBD,EAAKC,EAAGsC,GAC5BA,GAAO,GAEP,IAAIpC,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPQ,EAAKO,KAAKwB,IAAID,GACd7B,EAAKM,KAAKyB,IAAIF,GAElBvC,EAAI,GAAKG,EAAKO,EAAKN,EAAKK,EACxBT,EAAI,GAAKI,EAAKM,EAAKP,EAAKM,EACxBT,EAAI,GAAKK,EAAKK,EAAKJ,EAAKG,EACxBT,EAAI,GAAKM,EAAKI,EAAKL,EAAKI,CAE5B,CElDQ,CAAiBa,KAAKE,QAASF,KAAKE,QAASvB,GAC7CqB,KAAKC,WACED,IACX,CAEA,OAAAsB,CAAQC,EAAIvB,KAAKE,SAGb,OF0GD,SAAgBxB,EAAKC,GACxB,IAAI6C,EAAK7C,EAAE,GACP8C,EAAK9C,EAAE,GACP+C,EAAK/C,EAAE,GACPgD,EAAKhD,EAAE,GACPiD,EAAMJ,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EACzCE,EAASD,EAAM,EAAMA,EAAM,EAI/BlD,EAAI,IAAM8C,EAAKK,EACfnD,EAAI,IAAM+C,EAAKI,EACfnD,EAAI,IAAMgD,EAAKG,EACfnD,EAAI,GAAKiD,EAAKE,CAElB,CE3HQ,CAAgB7B,KAAKE,QAASqB,GAC9BvB,KAAKC,WACED,IACX,CAEA,SAAA8B,CAAUP,EAAIvB,KAAKE,SFgIhB,IAAmBxB,EAAKC,EE7HvB,OF6HkBD,EE/HCsB,KAAKE,QF+HDvB,EE/HU4C,EFgIrC7C,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACZD,EAAI,GAAKC,EAAE,GElIPqB,KAAKC,WACED,IACX,CAEA,IAAAe,CAAKQ,GAGD,OAFA,EAAcvB,KAAKE,QAASqB,GAC5BvB,KAAKC,WACED,IACX,CAEA,SAAA+B,CAAUR,EAAIvB,KAAKE,SAGf,OAFA,EAAmBF,KAAKE,QAASqB,GACjCvB,KAAKC,WACED,IACX,CAEA,QAAAvB,CAASuD,EAAIC,GAOT,OANIA,EACA,EAAkBjC,KAAKE,QAAS8B,EAAIC,GAEpC,EAAkBjC,KAAKE,QAASF,KAAKE,QAAS8B,GAElDhC,KAAKC,WACED,IACX,CAEA,GAAA4B,CAAIhB,GACA,OAAO,EAAaZ,KAAKE,QAASU,EACtC,CAEA,WAAAsB,CAAYC,GAGR,OFgHD,SAAkBzD,EAAK0D,GAG1B,IACIC,EADAC,EAASF,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAG7B,GAAIE,EAAS,EAETD,EAAQ3C,KAAKC,KAAK2C,EAAS,GAC3B5D,EAAI,GAAK,GAAM2D,EACfA,EAAQ,GAAMA,EACd3D,EAAI,IAAM0D,EAAE,GAAKA,EAAE,IAAMC,EACzB3D,EAAI,IAAM0D,EAAE,GAAKA,EAAE,IAAMC,EACzB3D,EAAI,IAAM0D,EAAE,GAAKA,EAAE,IAAMC,MACtB,CAEH,IAAIE,EAAI,EACJH,EAAE,GAAKA,EAAE,KAAIG,EAAI,GACjBH,EAAE,GAAKA,EAAM,EAAJG,EAAQA,KAAIA,EAAI,GAC7B,IAAIC,GAAKD,EAAI,GAAK,EACdE,GAAKF,EAAI,GAAK,EAElBF,EAAQ3C,KAAKC,KAAKyC,EAAM,EAAJG,EAAQA,GAAKH,EAAM,EAAJI,EAAQA,GAAKJ,EAAM,EAAJK,EAAQA,GAAK,GAC/D/D,EAAI6D,GAAK,GAAMF,EACfA,EAAQ,GAAMA,EACd3D,EAAI,IAAM0D,EAAM,EAAJI,EAAQC,GAAKL,EAAM,EAAJK,EAAQD,IAAMH,EACzC3D,EAAI8D,IAAMJ,EAAM,EAAJI,EAAQD,GAAKH,EAAM,EAAJG,EAAQC,IAAMH,EACzC3D,EAAI+D,IAAML,EAAM,EAAJK,EAAQF,GAAKH,EAAM,EAAJG,EAAQE,IAAMJ,CAC7C,CAGJ,CEjJQ,CAAkBrC,KAAKE,QAASiC,GAChCnC,KAAKC,WACED,IACX,CAEA,SAAA0C,CAAUC,EAAOC,GAIb,OFmJD,SAAmBlE,EAAKiE,EAAOE,EAAQ,OAC1C,IAAIC,EAAKpD,KAAKwB,IAAe,GAAXyB,EAAM,IACpBI,EAAKrD,KAAKyB,IAAe,GAAXwB,EAAM,IACpBK,EAAKtD,KAAKwB,IAAe,GAAXyB,EAAM,IACpBM,EAAKvD,KAAKyB,IAAe,GAAXwB,EAAM,IACpBO,EAAKxD,KAAKwB,IAAe,GAAXyB,EAAM,IACpBQ,EAAKzD,KAAKyB,IAAe,GAAXwB,EAAM,IAEV,QAAVE,GACAnE,EAAI,GAAKoE,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClCxE,EAAI,GAAKqE,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClCxE,EAAI,GAAKqE,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClCzE,EAAI,GAAKqE,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACPnE,EAAI,GAAKoE,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClCxE,EAAI,GAAKqE,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClCxE,EAAI,GAAKqE,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClCzE,EAAI,GAAKqE,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACPnE,EAAI,GAAKoE,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClCxE,EAAI,GAAKqE,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClCxE,EAAI,GAAKqE,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClCzE,EAAI,GAAKqE,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACPnE,EAAI,GAAKoE,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClCxE,EAAI,GAAKqE,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClCxE,EAAI,GAAKqE,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClCzE,EAAI,GAAKqE,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACPnE,EAAI,GAAKoE,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClCxE,EAAI,GAAKqE,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClCxE,EAAI,GAAKqE,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClCzE,EAAI,GAAKqE,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,IACPnE,EAAI,GAAKoE,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClCxE,EAAI,GAAKqE,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClCxE,EAAI,GAAKqE,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClCzE,EAAI,GAAKqE,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EAI1C,CE/LQ,CAAmBlD,KAAKE,QAASyC,EAAOA,EAAME,OAEzCD,GAAY5C,KAAKC,WACfD,IACX,CAEA,aAAAoD,CAAcC,EAAM1E,GAGhB,OFrHD,SAAsBD,EAAK2E,EAAMpC,GACpCA,GAAY,GACZ,IAAIqC,EAAI5D,KAAKwB,IAAID,GACjBvC,EAAI,GAAK4E,EAAID,EAAK,GAClB3E,EAAI,GAAK4E,EAAID,EAAK,GAClB3E,EAAI,GAAK4E,EAAID,EAAK,GAClB3E,EAAI,GAAKgB,KAAKyB,IAAIF,EAEtB,CE2GQ,CAAsBjB,KAAKE,QAASmD,EAAM1E,GAC1CqB,KAAKC,WACED,IACX,CAEA,KAAAuD,CAAMhC,EAAGiC,GAGL,OFJD,SAAe9E,EAAKC,EAAGC,EAAG4E,GAG7B,IASIC,EAAOC,EAAOC,EAAOC,EAAQC,EAT7BhF,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPK,EAAKL,EAAE,GACPM,EAAKL,EAAE,GACPM,EAAKN,EAAE,GACPO,EAAKP,EAAE,GACPQ,EAAKR,EAAE,GAKX8E,EAAQ7E,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EAEvCsE,EAAQ,IACRA,GAASA,EACTzE,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNC,GAAMA,GAGN,EAAMsE,EAAQ,MAEdD,EAAQ/D,KAAKoE,KAAKJ,GAClBC,EAAQjE,KAAKwB,IAAIuC,GACjBG,EAASlE,KAAKwB,KAAK,EAAMsC,GAAKC,GAASE,EACvCE,EAASnE,KAAKwB,IAAIsC,EAAIC,GAASE,IAI/BC,EAAS,EAAMJ,EACfK,EAASL,GAGb9E,EAAI,GAAKkF,EAAS/E,EAAKgF,EAAS5E,EAChCP,EAAI,GAAKkF,EAAS9E,EAAK+E,EAAS3E,EAChCR,EAAI,GAAKkF,EAAS7E,EAAK8E,EAAS1E,EAChCT,EAAI,GAAKkF,EAAS5E,EAAK6E,EAASzE,CAGpC,CE1CQ,CAAeY,KAAKE,QAASF,KAAKE,QAASqB,EAAGiC,GAC9CxD,KAAKC,WACED,IACX,CAEA,SAAA+D,CAAUpF,EAAGqF,EAAI,GAMb,OALAhE,KAAKE,QAAQ,GAAKvB,EAAEqF,GACpBhE,KAAKE,QAAQ,GAAKvB,EAAEqF,EAAI,GACxBhE,KAAKE,QAAQ,GAAKvB,EAAEqF,EAAI,GACxBhE,KAAKE,QAAQ,GAAKvB,EAAEqF,EAAI,GACxBhE,KAAKC,WACED,IACX,CAEA,OAAAiE,CAAQtF,EAAI,GAAIqF,EAAI,GAKhB,OAJArF,EAAEqF,GAAKhE,KAAK,GACZrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GACTrB,CACX,E,cCwCG,SAASuF,EAAYvF,GACxB,IAAIwF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,IACRmG,EAAMnG,EAAE,IACRoG,EAAMpG,EAAE,IACRqG,EAAMrG,EAAE,IACRsG,EAAMtG,EAAE,IACRuG,EAAMvG,EAAE,IAgBZ,OAdUwF,EAAMK,EAAMJ,EAAMG,IAWlBM,EAAMK,EAAMJ,EAAMG,IAVlBd,EAAMM,EAAMJ,EAAME,IASlBK,EAAMM,EAAMJ,EAAME,IARlBb,EAAMO,EAAMJ,EAAMC,IAOlBK,EAAMK,EAAMJ,EAAMG,IANlBZ,EAAMK,EAAMJ,EAAMG,IAKlBG,EAAMO,EAAMJ,EAAMC,IAJlBX,EAAMM,EAAMJ,EAAME,IAGlBG,EAAMM,EAAMJ,EAAME,IAFlBV,EAAMK,EAAMJ,EAAMG,IAClBE,EAAMK,EAAMJ,EAAMG,EAShC,CAUO,SAAS,EAASrG,EAAKC,EAAGC,GAC7B,IAAIuF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,IACRmG,EAAMnG,EAAE,IACRoG,EAAMpG,EAAE,IACRqG,EAAMrG,EAAE,IACRsG,EAAMtG,EAAE,IACRuG,EAAMvG,EAAE,IAGRwG,EAAKvG,EAAE,GACPwG,EAAKxG,EAAE,GACPyG,EAAKzG,EAAE,GACP0G,EAAK1G,EAAE,GAgCX,OA/BAF,EAAI,GAAKyG,EAAKhB,EAAMiB,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAC/CrG,EAAI,GAAKyG,EAAKf,EAAMgB,EAAKZ,EAAMa,EAAKT,EAAMU,EAAKN,EAC/CtG,EAAI,GAAKyG,EAAKd,EAAMe,EAAKX,EAAMY,EAAKR,EAAMS,EAAKL,EAC/CvG,EAAI,GAAKyG,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAAMQ,EAAKJ,EAE/CC,EAAKvG,EAAE,GACPwG,EAAKxG,EAAE,GACPyG,EAAKzG,EAAE,GACP0G,EAAK1G,EAAE,GACPF,EAAI,GAAKyG,EAAKhB,EAAMiB,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAC/CrG,EAAI,GAAKyG,EAAKf,EAAMgB,EAAKZ,EAAMa,EAAKT,EAAMU,EAAKN,EAC/CtG,EAAI,GAAKyG,EAAKd,EAAMe,EAAKX,EAAMY,EAAKR,EAAMS,EAAKL,EAC/CvG,EAAI,GAAKyG,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAAMQ,EAAKJ,EAE/CC,EAAKvG,EAAE,GACPwG,EAAKxG,EAAE,GACPyG,EAAKzG,EAAE,IACP0G,EAAK1G,EAAE,IACPF,EAAI,GAAKyG,EAAKhB,EAAMiB,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAC/CrG,EAAI,GAAKyG,EAAKf,EAAMgB,EAAKZ,EAAMa,EAAKT,EAAMU,EAAKN,EAC/CtG,EAAI,IAAMyG,EAAKd,EAAMe,EAAKX,EAAMY,EAAKR,EAAMS,EAAKL,EAChDvG,EAAI,IAAMyG,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAAMQ,EAAKJ,EAEhDC,EAAKvG,EAAE,IACPwG,EAAKxG,EAAE,IACPyG,EAAKzG,EAAE,IACP0G,EAAK1G,EAAE,IACPF,EAAI,IAAMyG,EAAKhB,EAAMiB,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAChDrG,EAAI,IAAMyG,EAAKf,EAAMgB,EAAKZ,EAAMa,EAAKT,EAAMU,EAAKN,EAChDtG,EAAI,IAAMyG,EAAKd,EAAMe,EAAKX,EAAMY,EAAKR,EAAMS,EAAKL,EAChDvG,EAAI,IAAMyG,EAAKb,EAAMc,EAAKV,EAAMW,EAAKP,EAAMQ,EAAKJ,EACzCxG,CACX,CAyMO,SAAS6G,EAAW7G,EAAK8G,GAC5B,IAAIC,EAAMD,EAAI,GACVE,EAAMF,EAAI,GACVG,EAAMH,EAAI,GACVI,EAAMJ,EAAI,GACVK,EAAML,EAAI,GACVM,EAAMN,EAAI,GACVO,EAAMP,EAAI,GACVQ,EAAMR,EAAI,GACVS,EAAMT,EAAI,IAMd,OAJA9G,EAAI,GAAKgB,KAAKwG,MAAMT,EAAKC,EAAKC,GAC9BjH,EAAI,GAAKgB,KAAKwG,MAAMN,EAAKC,EAAKC,GAC9BpH,EAAI,GAAKgB,KAAKwG,MAAMH,EAAKC,EAAKC,GAEvBvH,CACX,CA6BO,MAAMyH,EAAc,WACvB,MAAMC,EAAO,CAAC,EAAG,EAAG,GAEpB,OAAO,SAAU1H,EAAK8G,GAClB,IAAIa,EAAUD,EACdb,EAAWc,EAASb,GAEpB,IAAIc,EAAM,EAAID,EAAQ,GAClBE,EAAM,EAAIF,EAAQ,GAClBG,EAAM,EAAIH,EAAQ,GAElBI,EAAOjB,EAAI,GAAKc,EAChBI,EAAOlB,EAAI,GAAKe,EAChBI,EAAOnB,EAAI,GAAKgB,EAChBI,EAAOpB,EAAI,GAAKc,EAChBO,EAAOrB,EAAI,GAAKe,EAChBO,EAAOtB,EAAI,GAAKgB,EAChBO,EAAOvB,EAAI,GAAKc,EAChBU,EAAOxB,EAAI,GAAKe,EAChBU,EAAOzB,EAAI,IAAMgB,EAEjBU,EAAQT,EAAOI,EAAOI,EACtBE,EAAI,EA4BR,OA1BID,EAAQ,GACRC,EAA6B,EAAzBzH,KAAKC,KAAKuH,EAAQ,GACtBxI,EAAI,GAAK,IAAOyI,EAChBzI,EAAI,IAAMoI,EAAOE,GAAQG,EACzBzI,EAAI,IAAMqI,EAAOJ,GAAQQ,EACzBzI,EAAI,IAAMgI,EAAOE,GAAQO,GAClBV,EAAOI,GAAQJ,EAAOQ,GAC7BE,EAA0C,EAAtCzH,KAAKC,KAAK,EAAM8G,EAAOI,EAAOI,GAClCvI,EAAI,IAAMoI,EAAOE,GAAQG,EACzBzI,EAAI,GAAK,IAAOyI,EAChBzI,EAAI,IAAMgI,EAAOE,GAAQO,EACzBzI,EAAI,IAAMqI,EAAOJ,GAAQQ,GAClBN,EAAOI,GACdE,EAA0C,EAAtCzH,KAAKC,KAAK,EAAMkH,EAAOJ,EAAOQ,GAClCvI,EAAI,IAAMqI,EAAOJ,GAAQQ,EACzBzI,EAAI,IAAMgI,EAAOE,GAAQO,EACzBzI,EAAI,GAAK,IAAOyI,EAChBzI,EAAI,IAAMoI,EAAOE,GAAQG,IAEzBA,EAA0C,EAAtCzH,KAAKC,KAAK,EAAMsH,EAAOR,EAAOI,GAClCnI,EAAI,IAAMgI,EAAOE,GAAQO,EACzBzI,EAAI,IAAMqI,EAAOJ,GAAQQ,EACzBzI,EAAI,IAAMoI,EAAOE,GAAQG,EACzBzI,EAAI,GAAK,IAAOyI,GAGbzI,CACX,CACH,CApD0B,GA6apB,SAAS,EAAIA,EAAKC,EAAGC,GAiBxB,OAhBAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACbF,CACX,CAUO,SAAS0I,EAAS1I,EAAKC,EAAGC,GAiB7B,OAhBAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACbF,CACX,CC//BO,MAAM2I,UAAaxH,MACtB,WAAAC,CACIwH,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EACNjC,EAAM,EACNC,EAAM,EACNC,EAAM,EACNgC,EAAM,EACN/B,EAAM,EACNC,EAAM,EACNC,EAAM,EACN8B,EAAM,EACN7B,EAAM,EACNC,EAAM,EACNC,EAAM,GAGN,OADAlG,MAAMuH,EAAKC,EAAKC,EAAKC,EAAKC,EAAKjC,EAAKC,EAAKC,EAAKgC,EAAK/B,EAAKC,EAAKC,EAAK8B,EAAK7B,EAAKC,EAAKC,GAC1EjG,IACX,CAEA,KAAIX,GACA,OAAOW,KAAK,GAChB,CAEA,KAAIV,GACA,OAAOU,KAAK,GAChB,CAEA,KAAIT,GACA,OAAOS,KAAK,GAChB,CAEA,KAAIR,GACA,OAAOQ,KAAK,GAChB,CAEA,KAAIX,CAAEuB,GACFZ,KAAK,IAAMY,CACf,CAEA,KAAItB,CAAEsB,GACFZ,KAAK,IAAMY,CACf,CAEA,KAAIrB,CAAEqB,GACFZ,KAAK,IAAMY,CACf,CAEA,KAAIpB,CAAEoB,GACFZ,KAAK,IAAMY,CACf,CAEA,GAAAP,CAAIiH,EAAKC,EAAKC,EAAKC,EAAKC,EAAKjC,EAAKC,EAAKC,EAAKgC,EAAK/B,EAAKC,EAAKC,EAAK8B,EAAK7B,EAAKC,EAAKC,GAC3E,OAAIqB,EAAIxG,OAAed,KAAKe,KAAKuG,IDrBlC,SAAa5I,EAAK4I,EAAKC,EAAKC,EAAKC,EAAKC,EAAKjC,EAAKC,EAAKC,EAAKgC,EAAK/B,EAAKC,EAAKC,EAAK8B,EAAK7B,EAAKC,EAAKC,GAChGvH,EAAI,GAAK4I,EACT5I,EAAI,GAAK6I,EACT7I,EAAI,GAAK8I,EACT9I,EAAI,GAAK+I,EACT/I,EAAI,GAAKgJ,EACThJ,EAAI,GAAK+G,EACT/G,EAAI,GAAKgH,EACThH,EAAI,GAAKiH,EACTjH,EAAI,GAAKiJ,EACTjJ,EAAI,GAAKkH,EACTlH,EAAI,IAAMmH,EACVnH,EAAI,IAAMoH,EACVpH,EAAI,IAAMkJ,EACVlJ,EAAI,IAAMqH,EACVrH,EAAI,IAAMsH,EACVtH,EAAI,IAAMuH,CAEd,CCIQ,CAAajG,KAAMsH,EAAKC,EAAKC,EAAKC,EAAKC,EAAKjC,EAAKC,EAAKC,EAAKgC,EAAK/B,EAAKC,EAAKC,EAAK8B,EAAK7B,EAAKC,EAAKC,GACvFjG,KACX,CAEA,SAAA6H,CAAUjH,EAAGwB,EAAIpC,MAEb,ODyPD,SAAmBtB,EAAKC,EAAGiC,GAC9B,IAGIuD,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EALfzF,EAAIuB,EAAE,GACNtB,EAAIsB,EAAE,GACNrB,EAAIqB,EAAE,GAKNjC,IAAMD,GACNA,EAAI,IAAMC,EAAE,GAAKU,EAAIV,EAAE,GAAKW,EAAIX,EAAE,GAAKY,EAAIZ,EAAE,IAC7CD,EAAI,IAAMC,EAAE,GAAKU,EAAIV,EAAE,GAAKW,EAAIX,EAAE,GAAKY,EAAIZ,EAAE,IAC7CD,EAAI,IAAMC,EAAE,GAAKU,EAAIV,EAAE,GAAKW,EAAIX,EAAE,IAAMY,EAAIZ,EAAE,IAC9CD,EAAI,IAAMC,EAAE,GAAKU,EAAIV,EAAE,GAAKW,EAAIX,EAAE,IAAMY,EAAIZ,EAAE,MAE9CwF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,IACRmG,EAAMnG,EAAE,IAERD,EAAI,GAAKyF,EACTzF,EAAI,GAAK0F,EACT1F,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAK6F,EACT7F,EAAI,GAAK8F,EACT9F,EAAI,GAAK+F,EACT/F,EAAI,GAAKgG,EACThG,EAAI,GAAKiG,EACTjG,EAAI,GAAKkG,EACTlG,EAAI,IAAMmG,EACVnG,EAAI,IAAMoG,EAEVpG,EAAI,IAAMyF,EAAM9E,EAAIkF,EAAMjF,EAAIqF,EAAMpF,EAAIZ,EAAE,IAC1CD,EAAI,IAAM0F,EAAM/E,EAAImF,EAAMlF,EAAIsF,EAAMrF,EAAIZ,EAAE,IAC1CD,EAAI,IAAM2F,EAAMhF,EAAIoF,EAAMnF,EAAIuF,EAAMtF,EAAIZ,EAAE,IAC1CD,EAAI,IAAM4F,EAAMjF,EAAIqF,EAAMpF,EAAIwF,EAAMvF,EAAIZ,EAAE,IAIlD,CCzSQ,CAAmBqB,KAAMoC,EAAGxB,GACrBZ,IACX,CAEA,MAAA8H,CAAOlH,EAAGyC,EAAMjB,EAAIpC,MAEhB,OD8UD,SAAgBtB,EAAKC,EAAGsC,EAAKoC,GAChC,IAIIC,EAAGyE,EAAGvE,EACNW,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfkD,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EAVVnJ,EAAIgE,EAAK,GACT/D,EAAI+D,EAAK,GACT9D,EAAI8D,EAAK,GACT5D,EAAMC,KAAKwG,MAAM7G,EAAGC,EAAGC,GASvBG,KAAK+I,IAAIhJ,GA/ZD,OAmaZA,EAAM,EAAIA,EACVJ,GAAKI,EACLH,GAAKG,EACLF,GAAKE,EAEL6D,EAAI5D,KAAKwB,IAAID,GACb8G,EAAIrI,KAAKyB,IAAIF,GACbuC,EAAI,EAAIuE,EAER5D,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,IACRmG,EAAMnG,EAAE,IAGRqJ,EAAM3I,EAAIA,EAAImE,EAAIuE,EAClBE,EAAM3I,EAAID,EAAImE,EAAIjE,EAAI+D,EACtB4E,EAAM3I,EAAIF,EAAImE,EAAIlE,EAAIgE,EACtB6E,EAAM9I,EAAIC,EAAIkE,EAAIjE,EAAI+D,EACtB8E,EAAM9I,EAAIA,EAAIkE,EAAIuE,EAClBM,EAAM9I,EAAID,EAAIkE,EAAInE,EAAIiE,EACtBgF,EAAMjJ,EAAIE,EAAIiE,EAAIlE,EAAIgE,EACtBiF,EAAMjJ,EAAIC,EAAIiE,EAAInE,EAAIiE,EACtBkF,EAAMjJ,EAAIA,EAAIiE,EAAIuE,EAGlBrJ,EAAI,GAAKyF,EAAM6D,EAAMzD,EAAM0D,EAAMtD,EAAMuD,EACvCxJ,EAAI,GAAK0F,EAAM4D,EAAMxD,EAAMyD,EAAMrD,EAAMsD,EACvCxJ,EAAI,GAAK2F,EAAM2D,EAAMvD,EAAMwD,EAAMpD,EAAMqD,EACvCxJ,EAAI,GAAK4F,EAAM0D,EAAMtD,EAAMuD,EAAMnD,EAAMoD,EACvCxJ,EAAI,GAAKyF,EAAMgE,EAAM5D,EAAM6D,EAAMzD,EAAM0D,EACvC3J,EAAI,GAAK0F,EAAM+D,EAAM3D,EAAM4D,EAAMxD,EAAMyD,EACvC3J,EAAI,GAAK2F,EAAM8D,EAAM1D,EAAM2D,EAAMvD,EAAMwD,EACvC3J,EAAI,GAAK4F,EAAM6D,EAAMzD,EAAM0D,EAAMtD,EAAMuD,EACvC3J,EAAI,GAAKyF,EAAMmE,EAAM/D,EAAMgE,EAAM5D,EAAM6D,EACvC9J,EAAI,GAAK0F,EAAMkE,EAAM9D,EAAM+D,EAAM3D,EAAM4D,EACvC9J,EAAI,IAAM2F,EAAMiE,EAAM7D,EAAM8D,EAAM1D,EAAM2D,EACxC9J,EAAI,IAAM4F,EAAMgE,EAAM5D,EAAM6D,EAAMzD,EAAM0D,EAEpC7J,IAAMD,IAENA,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,KAGpB,CCvZQ,CAAgBqB,KAAMoC,EAAGxB,EAAGyC,GACrBrD,IACX,CAEA,KAAA0I,CAAM9H,EAAGwB,EAAIpC,MAET,ODwSD,SAAetB,EAAKC,EAAGiC,GAC1B,IAAIvB,EAAIuB,EAAE,GACNtB,EAAIsB,EAAE,GACNrB,EAAIqB,EAAE,GAEVlC,EAAI,GAAKC,EAAE,GAAKU,EAChBX,EAAI,GAAKC,EAAE,GAAKU,EAChBX,EAAI,GAAKC,EAAE,GAAKU,EAChBX,EAAI,GAAKC,EAAE,GAAKU,EAChBX,EAAI,GAAKC,EAAE,GAAKW,EAChBZ,EAAI,GAAKC,EAAE,GAAKW,EAChBZ,EAAI,GAAKC,EAAE,GAAKW,EAChBZ,EAAI,GAAKC,EAAE,GAAKW,EAChBZ,EAAI,GAAKC,EAAE,GAAKY,EAChBb,EAAI,GAAKC,EAAE,GAAKY,EAChBb,EAAI,IAAMC,EAAE,IAAMY,EAClBb,EAAI,IAAMC,EAAE,IAAMY,EAClBb,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,GAEhB,CC/TQ,CAAeqB,KAAMoC,EAAgB,iBAANxB,EAAiB,CAACA,EAAGA,EAAGA,GAAKA,GACrDZ,IACX,CAEA,GAAA2I,CAAIC,EAAIC,GAGJ,OAFIA,EAAI,EAAa7I,KAAM4I,EAAIC,GAC1B,EAAa7I,KAAMA,KAAM4I,GACvB5I,IACX,CAEA,GAAA8I,CAAIF,EAAIC,GAGJ,OAFIA,EAAI,EAAkB7I,KAAM4I,EAAIC,GAC/B,EAAkB7I,KAAMA,KAAM4I,GAC5B5I,IACX,CAEA,QAAAvB,CAASmK,EAAIC,GDi7BV,IAAwBnK,EAAKC,EAAGC,ECz6B/B,OAPKgK,EAAG9H,OAEG+H,EACP,EAAkB7I,KAAM4I,EAAIC,GAE5B,EAAkB7I,KAAMA,KAAM4I,ID26BNjK,EC/6BMqB,KD+6BHpB,EC/6BSgK,GD+6BjBlK,EC/6BKsB,MDg7B5B,GAAKrB,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,GCz7BPoB,IACX,CAEA,QAAAa,GDtCG,IAAkBnC,ECwCjB,ODxCiBA,ECuCCsB,MDtClB,GAAK,EACTtB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,ECwBCsB,IACX,CAEA,IAAAe,CAAKqB,GD/FF,IAAc1D,EAAKC,ECiGlB,ODjGkBA,ECgGEyD,GDhGP1D,ECgGCsB,MD/Fd,GAAKrB,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,ICiFDqB,IACX,CAEA,eAAA+I,EAAgB,IAAEC,EAAG,OAAEC,EAAM,KAAEC,EAAI,IAAEC,GAAQ,CAAC,GAE1C,ODstBD,SAAqBzK,EAAK0K,EAAMH,EAAQC,EAAMC,GACjD,IAAIE,EAAI,EAAM3J,KAAK4J,IAAIF,EAAO,GAC1BG,EAAK,GAAKL,EAAOC,GACrBzK,EAAI,GAAK2K,EAAIJ,EACbvK,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK2K,EACT3K,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAOyK,EAAMD,GAAQK,EACzB7K,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAAIyK,EAAMD,EAAOK,EAC3B7K,EAAI,IAAM,CAEd,CC3uBQ,CAAqBsB,KAAMgJ,EAAKC,EAAQC,EAAMC,GACvCnJ,IACX,CAEA,cAAAwJ,EAAe,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,IAAEC,EAAG,KAAEV,EAAI,IAAEC,IAE7C,ODmvBD,SAAezK,EAAK+K,EAAMC,EAAOC,EAAQC,EAAKV,EAAMC,GACvD,IAAIU,EAAK,GAAKJ,EAAOC,GACjBI,EAAK,GAAKH,EAASC,GACnBL,EAAK,GAAKL,EAAOC,GACrBzK,EAAI,IAAM,EAAImL,EACdnL,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIoL,EACdpL,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI6K,EACd7K,EAAI,IAAM,EACVA,EAAI,KAAO+K,EAAOC,GAASG,EAC3BnL,EAAI,KAAOkL,EAAMD,GAAUG,EAC3BpL,EAAI,KAAOyK,EAAMD,GAAQK,EACzB7K,EAAI,IAAM,CAEd,CCzwBQ,CAAesB,KAAMyJ,EAAMC,EAAOC,EAAQC,EAAKV,EAAMC,GAC9CnJ,IACX,CAEA,cAAA+J,CAAexI,GAEX,ODwpBD,SAAkB7C,EAAK6C,GAC1B,IAAIlC,EAAIkC,EAAE,GACNjC,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GACN/B,EAAI+B,EAAE,GACNyI,EAAK3K,EAAIA,EACT4K,EAAK3K,EAAIA,EACT4K,EAAK3K,EAAIA,EAET4K,EAAK9K,EAAI2K,EACTI,EAAK9K,EAAI0K,EACTK,EAAK/K,EAAI2K,EACTK,EAAK/K,EAAIyK,EACTO,EAAKhL,EAAI0K,EACTO,EAAKjL,EAAI2K,EACTO,EAAKjL,EAAIwK,EACTU,EAAKlL,EAAIyK,EACTU,EAAKnL,EAAI0K,EAEbxL,EAAI,GAAK,EAAI2L,EAAKG,EAClB9L,EAAI,GAAK0L,EAAKO,EACdjM,EAAI,GAAK4L,EAAKI,EACdhM,EAAI,GAAK,EAETA,EAAI,GAAK0L,EAAKO,EACdjM,EAAI,GAAK,EAAIyL,EAAKK,EAClB9L,EAAI,GAAK6L,EAAKE,EACd/L,EAAI,GAAK,EAETA,EAAI,GAAK4L,EAAKI,EACdhM,EAAI,GAAK6L,EAAKE,EACd/L,EAAI,IAAM,EAAIyL,EAAKE,EACnB3L,EAAI,IAAM,EAEVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,CAGd,CCjsBQ,CAAkBsB,KAAMuB,GACjBvB,IACX,CAEA,WAAA4K,CAAYhK,GAIR,OAHAZ,KAAKX,EAAIuB,EAAE,GACXZ,KAAKV,EAAIsB,EAAE,GACXZ,KAAKT,EAAIqB,EAAE,GACJZ,IACX,CAEA,OAAAsB,CAAQc,EAAIpC,MAER,ODMD,SAAgBtB,EAAKC,GACxB,IAAIwF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,IACRmG,EAAMnG,EAAE,IACRoG,EAAMpG,EAAE,IACRqG,EAAMrG,EAAE,IACRsG,EAAMtG,EAAE,IACRuG,EAAMvG,EAAE,IAERqJ,EAAM7D,EAAMK,EAAMJ,EAAMG,EACxB0D,EAAM9D,EAAMM,EAAMJ,EAAME,EACxB2D,EAAM/D,EAAMO,EAAMJ,EAAMC,EACxBsG,EAAMzG,EAAMK,EAAMJ,EAAMG,EACxBsG,EAAM1G,EAAMM,EAAMJ,EAAME,EACxBuG,EAAM1G,EAAMK,EAAMJ,EAAMG,EACxBuG,EAAMrG,EAAMK,EAAMJ,EAAMG,EACxBkG,EAAMtG,EAAMM,EAAMJ,EAAME,EACxBmG,EAAMvG,EAAMO,EAAMJ,EAAMC,EACxBoG,EAAMvG,EAAMK,EAAMJ,EAAMG,EACxBmD,EAAMvD,EAAMM,EAAMJ,EAAME,EACxBoD,EAAMvD,EAAMK,EAAMJ,EAAMG,EAGxBmG,EAAMpD,EAAMI,EAAMH,EAAME,EAAMD,EAAMiD,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAEvEI,IAGLA,EAAM,EAAMA,EAEZ1M,EAAI,IAAM8F,EAAM4D,EAAM3D,EAAM0D,EAAMzD,EAAMyG,GAAOC,EAC/C1M,EAAI,IAAM2F,EAAM8D,EAAM/D,EAAMgE,EAAM9D,EAAM6G,GAAOC,EAC/C1M,EAAI,IAAMsG,EAAM+F,EAAM9F,EAAM6F,EAAM5F,EAAM2F,GAAOO,EAC/C1M,EAAI,IAAMmG,EAAMiG,EAAMlG,EAAMmG,EAAMjG,EAAM+F,GAAOO,EAC/C1M,EAAI,IAAM+F,EAAMyG,EAAM3G,EAAM6D,EAAM1D,EAAMuG,GAAOG,EAC/C1M,EAAI,IAAMyF,EAAMiE,EAAM/D,EAAM6G,EAAM5G,EAAM2G,GAAOG,EAC/C1M,EAAI,IAAMuG,EAAMiD,EAAMnD,EAAMgG,EAAM7F,EAAM+C,GAAOmD,EAC/C1M,EAAI,IAAMiG,EAAMoG,EAAMlG,EAAMqD,EAAMpD,EAAMmD,GAAOmD,EAC/C1M,EAAI,IAAM6F,EAAM4D,EAAM3D,EAAM0G,EAAMxG,EAAMsG,GAAOI,EAC/C1M,EAAI,IAAM0F,EAAM8G,EAAM/G,EAAMgE,EAAM7D,EAAM0G,GAAOI,EAC/C1M,EAAI,KAAOqG,EAAM+F,EAAM9F,EAAMkD,EAAMhD,EAAM8C,GAAOoD,EAChD1M,EAAI,KAAOkG,EAAMsD,EAAMvD,EAAMmG,EAAMhG,EAAMkD,GAAOoD,EAChD1M,EAAI,KAAO8F,EAAMyG,EAAM1G,EAAM4G,EAAM1G,EAAMuG,GAAOI,EAChD1M,EAAI,KAAOyF,EAAMgH,EAAM/G,EAAM6G,EAAM5G,EAAM2G,GAAOI,EAChD1M,EAAI,KAAOsG,EAAMiD,EAAMlD,EAAM8F,EAAM5F,EAAM+C,GAAOoD,EAChD1M,EAAI,KAAOiG,EAAMkG,EAAMjG,EAAMqD,EAAMpD,EAAMmD,GAAOoD,EAGpD,CChEQ,CAAgBpL,KAAMoC,GACfpC,IACX,CAEA,OAAAqL,CAAQ9J,EAAG+J,EAAK5C,GAEZ,ODohBD,SAAiB6C,EAAQC,EAAaC,EAAgBC,GACzD,MAAMC,EAAKJ,EAELlM,EAAImM,EAAY,GAClBlM,EAAIkM,EAAY,GAChBjM,EAAIiM,EAAY,GAChBhM,EAAIgM,EAAY,GACdxB,EAAK3K,EAAIA,EACX4K,EAAK3K,EAAIA,EACT4K,EAAK3K,EAAIA,EACP4K,EAAK9K,EAAI2K,EACX4B,EAAKvM,EAAI4K,EACT4B,EAAKxM,EAAI6K,EACPG,EAAK/K,EAAI2K,EACX6B,EAAKxM,EAAI4K,EACTM,EAAKjL,EAAI2K,EACPO,EAAKjL,EAAIwK,EACXU,EAAKlL,EAAIyK,EACTU,EAAKnL,EAAI0K,EAEPpH,EAAK4I,EAAS,GAChB1I,EAAK0I,EAAS,GACdxI,EAAKwI,EAAS,GAElBC,EAAG,IAAM,GAAKtB,EAAKG,IAAO1H,EAC1B6I,EAAG,IAAMC,EAAKjB,GAAM7H,EACpB6I,EAAG,IAAME,EAAKnB,GAAM5H,EACpB6I,EAAG,GAAK,EAERA,EAAG,IAAMC,EAAKjB,GAAM3H,EACpB2I,EAAG,IAAM,GAAKxB,EAAKK,IAAOxH,EAC1B2I,EAAG,IAAMG,EAAKrB,GAAMzH,EACpB2I,EAAG,GAAK,EAERA,EAAG,IAAME,EAAKnB,GAAMxH,EACpByI,EAAG,IAAMG,EAAKrB,GAAMvH,EACpByI,EAAG,KAAO,GAAKxB,EAAKE,IAAOnH,EAC3ByI,EAAG,IAAM,EAETA,EAAG,IAAMF,EAAe,GACxBE,EAAG,IAAMF,EAAe,GACxBE,EAAG,IAAMF,EAAe,GACxBE,EAAG,IAAM,CAGb,CClkBQ,CAAiB3L,KAAMuB,EAAG+J,EAAK5C,GACxB1I,IACX,CAEA,SAAA+L,CAAUxK,EAAG+J,EAAK5C,GAEd,ODydD,SAAmBsD,EAAQC,EAAaC,EAAgBC,GAC3D,IAAIrJ,EAAK,KAAY,CAACkJ,EAAO,GAAIA,EAAO,GAAIA,EAAO,KACnD,MAAMhJ,EAAK,KAAY,CAACgJ,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAC/C9I,EAAK,KAAY,CAAC8I,EAAO,GAAIA,EAAO,GAAIA,EAAO,MAGzC9H,EAAY8H,GACd,IAAGlJ,GAAMA,GAEnBoJ,EAAe,GAAKF,EAAO,IAC3BE,EAAe,GAAKF,EAAO,IAC3BE,EAAe,GAAKF,EAAO,IAG3B,MAAMI,EAAMJ,EAAOK,QAEbC,EAAQ,EAAIxJ,EACZyJ,EAAQ,EAAIvJ,EACZwJ,EAAQ,EAAItJ,EAElBkJ,EAAI,IAAME,EACVF,EAAI,IAAME,EACVF,EAAI,IAAME,EAEVF,EAAI,IAAMG,EACVH,EAAI,IAAMG,EACVH,EAAI,IAAMG,EAEVH,EAAI,IAAMI,EACVJ,EAAI,IAAMI,EACVJ,EAAI,KAAOI,EAEXrG,EAAY8F,EAAaG,GAEzBD,EAAS,GAAKrJ,EACdqJ,EAAS,GAAKnJ,EACdmJ,EAAS,GAAKjJ,CAClB,CC/fQ,CAAmBlD,KAAMuB,EAAG+J,EAAK5C,GAC1B1I,IACX,CAEA,WAAAmG,CAAY5E,GAER,OADA,EAAqBA,EAAGvB,MACjBA,IACX,CAEA,cAAAyM,CAAenB,GD8UZ,IAAwB5M,EAAK8G,EC5U5B,OD4U4BA,EC7UCxF,MD6UNtB,EC7UC4M,GD8UxB,GAAK9F,EAAI,IACb9G,EAAI,GAAK8G,EAAI,IACb9G,EAAI,GAAK8G,EAAI,IC/UFxF,IACX,CAEA,UAAAuF,CAAWmD,GAEP,OADA,EAAoBA,EAAO1I,MACpBA,IACX,CAEA,iBAAA0M,GACI,ODuWD,SAA2BlH,GAC9B,IAAIC,EAAMD,EAAI,GACVE,EAAMF,EAAI,GACVG,EAAMH,EAAI,GACVI,EAAMJ,EAAI,GACVK,EAAML,EAAI,GACVM,EAAMN,EAAI,GACVO,EAAMP,EAAI,GACVQ,EAAMR,EAAI,GACVS,EAAMT,EAAI,IAEd,MAAMnG,EAAIoG,EAAMA,EAAMC,EAAMA,EAAMC,EAAMA,EAClCrG,EAAIsG,EAAMA,EAAMC,EAAMA,EAAMC,EAAMA,EAClCvG,EAAIwG,EAAMA,EAAMC,EAAMA,EAAMC,EAAMA,EAExC,OAAOvG,KAAKC,KAAKD,KAAKiN,IAAItN,EAAGC,EAAGC,GACpC,CCvXe,CAA2BS,KACtC,CAEA,MAAA4M,CAAOC,EAAKvM,EAAQwM,GAEhB,ODguBD,SAAkBpO,EAAKmO,EAAKvM,EAAQwM,GACvC,IAAIC,EAAOF,EAAI,GACXG,EAAOH,EAAI,GACXI,EAAOJ,EAAI,GACXK,EAAMJ,EAAG,GACTK,EAAML,EAAG,GACTM,EAAMN,EAAG,GAETO,EAAKN,EAAOzM,EAAO,GACnBgN,EAAKN,EAAO1M,EAAO,GACnB4J,EAAK+C,EAAO3M,EAAO,GAEnBb,EAAM4N,EAAKA,EAAKC,EAAKA,EAAKpD,EAAKA,EACvB,IAARzK,EAEAyK,EAAK,GAELzK,EAAM,EAAIC,KAAKC,KAAKF,GACpB4N,GAAM5N,EACN6N,GAAM7N,EACNyK,GAAMzK,GAGV,IAAI8N,EAAKJ,EAAMjD,EAAKkD,EAAME,EACtBE,EAAKJ,EAAMC,EAAKH,EAAMhD,EACtBF,EAAKkD,EAAMI,EAAKH,EAAME,EAE1B5N,EAAM8N,EAAKA,EAAKC,EAAKA,EAAKxD,EAAKA,EACnB,IAARvK,IAEI2N,EACAF,GAAO,KACAC,EACPC,GAAO,KAEPD,GAAO,KAEVI,EAAKJ,EAAMjD,EAAKkD,EAAME,EAAME,EAAKJ,EAAMC,EAAKH,EAAMhD,EAAMF,EAAKkD,EAAMI,EAAKH,EAAME,EAE/E5N,EAAM8N,EAAKA,EAAKC,EAAKA,EAAKxD,EAAKA,GAGnCvK,EAAM,EAAIC,KAAKC,KAAKF,GACpB8N,GAAM9N,EACN+N,GAAM/N,EACNuK,GAAMvK,EAENf,EAAI,GAAK6O,EACT7O,EAAI,GAAK8O,EACT9O,EAAI,GAAKsL,EACTtL,EAAI,GAAK,EACTA,EAAI,GAAK4O,EAAKtD,EAAKE,EAAKsD,EACxB9O,EAAI,GAAKwL,EAAKqD,EAAKF,EAAKrD,EACxBtL,EAAI,GAAK2O,EAAKG,EAAKF,EAAKC,EACxB7O,EAAI,GAAK,EACTA,EAAI,GAAK2O,EACT3O,EAAI,GAAK4O,EACT5O,EAAI,IAAMwL,EACVxL,EAAI,IAAM,EACVA,EAAI,IAAMqO,EACVrO,EAAI,IAAMsO,EACVtO,EAAI,IAAMuO,EACVvO,EAAI,IAAM,CAEd,CCjyBQ,CAAkBsB,KAAM6M,EAAKvM,EAAQwM,GAC9B9M,IACX,CAEA,WAAAkE,GACI,OAAO,EAAqBlE,KAChC,CAEA,SAAA+D,CAAUpF,EAAGqF,EAAI,GAiBb,OAhBAhE,KAAK,GAAKrB,EAAEqF,GACZhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,IAAMrB,EAAEqF,EAAI,IACjBhE,KAAK,IAAMrB,EAAEqF,EAAI,IACjBhE,KAAK,IAAMrB,EAAEqF,EAAI,IACjBhE,KAAK,IAAMrB,EAAEqF,EAAI,IACjBhE,KAAK,IAAMrB,EAAEqF,EAAI,IACjBhE,KAAK,IAAMrB,EAAEqF,EAAI,IACVhE,IACX,CAEA,OAAAiE,CAAQtF,EAAI,GAAIqF,EAAI,GAiBhB,OAhBArF,EAAEqF,GAAKhE,KAAK,GACZrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,IAAMhE,KAAK,IACjBrB,EAAEqF,EAAI,IAAMhE,KAAK,IACjBrB,EAAEqF,EAAI,IAAMhE,KAAK,IACjBrB,EAAEqF,EAAI,IAAMhE,KAAK,IACjBrB,EAAEqF,EAAI,IAAMhE,KAAK,IACjBrB,EAAEqF,EAAI,IAAMhE,KAAK,IACVrB,CACX,ECnNJ,MAAM8O,EAA0B,IAAIpG,EAE7B,MAAMqG,UAAc7N,MACvB,WAAAC,CAAYT,EAAI,EAAGC,EAAID,EAAGE,EAAIF,EAAGwD,EAAQ,OACrC9C,MAAMV,EAAGC,EAAGC,GACZS,KAAK6C,MAAQA,EACb7C,KAAKC,SAAW,OAGhBD,KAAKE,QAAUF,KAGf,MAAMG,EAAe,CAAC,IAAK,IAAK,KAChC,OAAO,IAAIC,MAAMJ,KAAM,CACnB,GAAAK,CAAIC,EAAQC,GACR,MAAMC,EAAUC,QAAQJ,OAAOK,WAE/B,OADIF,GAAWL,EAAaQ,SAASJ,IAAWD,EAAOL,WAChDO,CACX,GAER,CAEA,KAAInB,GACA,OAAOW,KAAK,EAChB,CAEA,KAAIV,GACA,OAAOU,KAAK,EAChB,CAEA,KAAIT,GACA,OAAOS,KAAK,EAChB,CAEA,KAAIX,CAAEuB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,KAAIX,CAAEsB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,KAAIV,CAAEqB,GACFZ,KAAKE,QAAQ,GAAKU,EAClBZ,KAAKC,UACT,CAEA,GAAAI,CAAIhB,EAAGC,EAAID,EAAGE,EAAIF,GACd,OAAIA,EAAEyB,OAAed,KAAKe,KAAK1B,IAC/BW,KAAKE,QAAQ,GAAKb,EAClBW,KAAKE,QAAQ,GAAKZ,EAClBU,KAAKE,QAAQ,GAAKX,EAClBS,KAAKC,WACED,KACX,CAEA,IAAAe,CAAKH,GAKD,OAJAZ,KAAKE,QAAQ,GAAKU,EAAE,GACpBZ,KAAKE,QAAQ,GAAKU,EAAE,GACpBZ,KAAKE,QAAQ,GAAKU,EAAE,GACpBZ,KAAKC,WACED,IACX,CAEA,OAAA2N,CAAQ9K,GAGJ,OAFA7C,KAAKE,QAAQ2C,MAAQA,EACrB7C,KAAKC,WACED,IACX,CAEA,kBAAA4N,CAAmBxL,EAAGS,EAAQ7C,KAAK6C,OAG/B,OC7ED,SAA4BnE,EAAK0D,EAAGS,EAAQ,OACjC,QAAVA,GACAnE,EAAI,GAAKgB,KAAKmO,KAAKnO,KAAKoO,IAAIpO,KAAKiN,IAAIvK,EAAE,IAAK,GAAI,IAC5C1C,KAAK+I,IAAIrG,EAAE,IAAM,QACjB1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,KAC7B1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,MAE7B1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,IAC5B1D,EAAI,GAAK,IAEI,QAAVmE,GACPnE,EAAI,GAAKgB,KAAKmO,MAAMnO,KAAKoO,IAAIpO,KAAKiN,IAAIvK,EAAE,IAAK,GAAI,IAC7C1C,KAAK+I,IAAIrG,EAAE,IAAM,QACjB1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,KAC5B1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,MAE5B1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,IAC7B1D,EAAI,GAAK,IAEI,QAAVmE,GACPnE,EAAI,GAAKgB,KAAKmO,KAAKnO,KAAKoO,IAAIpO,KAAKiN,IAAIvK,EAAE,IAAK,GAAI,IAC5C1C,KAAK+I,IAAIrG,EAAE,IAAM,QACjB1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,KAC7B1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,MAE7B1D,EAAI,GAAK,EACTA,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,MAEf,QAAVS,GACPnE,EAAI,GAAKgB,KAAKmO,MAAMnO,KAAKoO,IAAIpO,KAAKiN,IAAIvK,EAAE,IAAK,GAAI,IAC7C1C,KAAK+I,IAAIrG,EAAE,IAAM,QACjB1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,KAC5B1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,MAE5B1D,EAAI,GAAK,EACTA,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,MAEhB,QAAVS,GACPnE,EAAI,GAAKgB,KAAKmO,KAAKnO,KAAKoO,IAAIpO,KAAKiN,IAAIvK,EAAE,IAAK,GAAI,IAC5C1C,KAAK+I,IAAIrG,EAAE,IAAM,QACjB1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,IAC7B1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,MAE7B1D,EAAI,GAAK,EACTA,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,OAEf,QAAVS,IACPnE,EAAI,GAAKgB,KAAKmO,MAAMnO,KAAKoO,IAAIpO,KAAKiN,IAAIvK,EAAE,IAAK,GAAI,IAC7C1C,KAAK+I,IAAIrG,EAAE,IAAM,QACjB1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,IAC5B1D,EAAI,GAAKgB,KAAKqO,MAAM3L,EAAE,GAAIA,EAAE,MAE5B1D,EAAI,GAAKgB,KAAKqO,OAAO3L,EAAE,GAAIA,EAAE,KAC7B1D,EAAI,GAAK,GAKrB,CDiBQ,CAA6BsB,KAAKE,QAASkC,EAAGS,GAC9C7C,KAAKC,WACED,IACX,CAEA,cAAA+J,CAAexI,EAAGsB,EAAQ7C,KAAK6C,MAAOD,GAKlC,OAJA6K,EAAQ1D,eAAexI,GACvBvB,KAAKE,QAAQ0N,mBAAmBH,EAAS5K,GAEpCD,GAAY5C,KAAKC,WACfD,IACX,CAEA,SAAA+D,CAAUpF,EAAGqF,EAAI,GAIb,OAHAhE,KAAKE,QAAQ,GAAKvB,EAAEqF,GACpBhE,KAAKE,QAAQ,GAAKvB,EAAEqF,EAAI,GACxBhE,KAAKE,QAAQ,GAAKvB,EAAEqF,EAAI,GACjBhE,IACX,CAEA,OAAAiE,CAAQtF,EAAI,GAAIqF,EAAI,GAIhB,OAHArF,EAAEqF,GAAKhE,KAAK,GACZrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GACTrB,CACX,EEhGG,MAAMqP,EACT,WAAAlO,GACIE,KAAKiO,OAAS,KACdjO,KAAKkO,SAAW,GAChBlO,KAAKmO,SAAU,EAEfnO,KAAKoO,OAAS,IAAI/G,EAClBrH,KAAKqO,YAAc,IAAIhH,EACvBrH,KAAKsO,kBAAmB,EACxBtO,KAAKuO,wBAAyB,EAE9BvO,KAAKwO,SAAW,IAAIC,EAAA,EACpBzO,KAAK0O,WAAa,IAAI9O,EACtBI,KAAK0I,MAAQ,IAAI+F,EAAA,EAAK,GACtBzO,KAAK2O,SAAW,IAAIjB,EACpB1N,KAAK8M,GAAK,IAAI2B,EAAA,EAAK,EAAG,EAAG,GAEzBzO,KAAK2O,SAASzO,QAAQD,SAAW,IAAMD,KAAK0O,WAAWhM,UAAU1C,KAAK2O,UAAU,GAChF3O,KAAK0O,WAAWxO,QAAQD,SAAW,IAAMD,KAAK2O,SAAS5E,eAAe/J,KAAK0O,gBAAYE,GAAW,EACtG,CAEA,SAAAC,CAAUZ,EAAQa,GAAe,GACzB9O,KAAKiO,QAAUA,IAAWjO,KAAKiO,QAAQjO,KAAKiO,OAAOc,YAAY/O,MAAM,GACzEA,KAAKiO,OAASA,EACVa,GAAgBb,GAAQA,EAAOe,SAAShP,MAAM,EACtD,CAEA,QAAAgP,CAASC,EAAOC,GAAc,IACpBlP,KAAKkO,SAASiB,QAAQF,IAAQjP,KAAKkO,SAASkB,KAAKH,GACnDC,GAAaD,EAAMJ,UAAU7O,MAAM,EAC3C,CAEA,WAAA+O,CAAYE,EAAOC,GAAc,IACtBlP,KAAKkO,SAASiB,QAAQF,IAAQjP,KAAKkO,SAASmB,OAAOrP,KAAKkO,SAASiB,QAAQF,GAAQ,GACpFC,GAAaD,EAAMJ,UAAU,MAAM,EAC3C,CAEA,iBAAAS,CAAkBC,GACVvP,KAAKsO,kBAAkBtO,KAAKwP,gBAC5BxP,KAAKuO,wBAA0BgB,KACX,OAAhBvP,KAAKiO,OAAiBjO,KAAKqO,YAAYtN,KAAKf,KAAKoO,QAChDpO,KAAKqO,YAAY5P,SAASuB,KAAKiO,OAAOI,YAAarO,KAAKoO,QAC7DpO,KAAKuO,wBAAyB,EAC9BgB,GAAQ,GAGZ,IAAK,IAAIhN,EAAI,EAAGkN,EAAIzP,KAAKkO,SAASpN,OAAQyB,EAAIkN,EAAGlN,IAC7CvC,KAAKkO,SAAS3L,GAAG+M,kBAAkBC,EAE3C,CAEA,YAAAC,GACIxP,KAAKoO,OAAO/C,QAAQrL,KAAK0O,WAAY1O,KAAKwO,SAAUxO,KAAK0I,OACzD1I,KAAKuO,wBAAyB,CAClC,CAEA,QAAAmB,CAASC,GAEL,IAAIA,EAAS3P,MACb,IAAK,IAAIuC,EAAI,EAAGkN,EAAIzP,KAAKkO,SAASpN,OAAQyB,EAAIkN,EAAGlN,IAC7CvC,KAAKkO,SAAS3L,GAAGmN,SAASC,EAElC,CAEA,SAAA5D,GACI/L,KAAKoO,OAAOrC,UAAU/L,KAAK0O,WAAWxO,QAASF,KAAKwO,SAAUxO,KAAK0I,OACnE1I,KAAK2O,SAAS5E,eAAe/J,KAAK0O,WACtC,CAEA,MAAA9B,CAAOtM,EAAQsP,GAAS,GAChBA,EAAQ5P,KAAKoO,OAAOxB,OAAO5M,KAAKwO,SAAUlO,EAAQN,KAAK8M,IACtD9M,KAAKoO,OAAOxB,OAAOtM,EAAQN,KAAKwO,SAAUxO,KAAK8M,IACpD9M,KAAKoO,OAAOjI,YAAYnG,KAAK0O,WAAWxO,SACxCF,KAAK2O,SAAS5E,eAAe/J,KAAK0O,WACtC,ECmJG,SAAS,EAAShQ,EAAKC,EAAGC,GAC7B,IAAIuF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GAERqJ,EAAMpJ,EAAE,GACRqJ,EAAMrJ,EAAE,GACRsJ,EAAMtJ,EAAE,GACRuJ,EAAMvJ,EAAE,GACRwJ,EAAMxJ,EAAE,GACRyJ,EAAMzJ,EAAE,GACR0J,EAAM1J,EAAE,GACR2J,EAAM3J,EAAE,GACR4J,EAAM5J,EAAE,GAaZ,OAXAF,EAAI,GAAKsJ,EAAM7D,EAAM8D,EAAM1D,EAAM2D,EAAMvD,EACvCjG,EAAI,GAAKsJ,EAAM5D,EAAM6D,EAAMzD,EAAM0D,EAAMtD,EACvClG,EAAI,GAAKsJ,EAAM3D,EAAM4D,EAAMxD,EAAMyD,EAAMrD,EAEvCnG,EAAI,GAAKyJ,EAAMhE,EAAMiE,EAAM7D,EAAM8D,EAAM1D,EACvCjG,EAAI,GAAKyJ,EAAM/D,EAAMgE,EAAM5D,EAAM6D,EAAMzD,EACvClG,EAAI,GAAKyJ,EAAM9D,EAAM+D,EAAM3D,EAAM4D,EAAMxD,EAEvCnG,EAAI,GAAK4J,EAAMnE,EAAMoE,EAAMhE,EAAMiE,EAAM7D,EACvCjG,EAAI,GAAK4J,EAAMlE,EAAMmE,EAAM/D,EAAMgE,EAAM5D,EACvClG,EAAI,GAAK4J,EAAMjE,EAAMkE,EAAM9D,EAAM+D,EAAM3D,EAChCnG,CACX,CCjQO,MAAMmR,UAAahQ,MACtB,WAAAC,CAAYwH,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGE,EAAM,EAAGjC,EAAM,EAAGC,EAAM,EAAGiC,EAAM,EAAG/B,EAAM,EAAGC,EAAM,GAEtF,OADA9F,MAAMuH,EAAKC,EAAKC,EAAKE,EAAKjC,EAAKC,EAAKiC,EAAK/B,EAAKC,GACvC7F,IACX,CAEA,GAAAK,CAAIiH,EAAKC,EAAKC,EAAKE,EAAKjC,EAAKC,EAAKiC,EAAK/B,EAAKC,GACxC,OAAIyB,EAAIxG,OAAed,KAAKe,KAAKuG,IDiFlC,SAAa5I,EAAK4I,EAAKC,EAAKC,EAAKE,EAAKjC,EAAKC,EAAKiC,EAAK/B,EAAKC,GAC7DnH,EAAI,GAAK4I,EACT5I,EAAI,GAAK6I,EACT7I,EAAI,GAAK8I,EACT9I,EAAI,GAAKgJ,EACThJ,EAAI,GAAK+G,EACT/G,EAAI,GAAKgH,EACThH,EAAI,GAAKiJ,EACTjJ,EAAI,GAAKkH,EACTlH,EAAI,GAAKmH,CAEb,CC3FQ,CAAa7F,KAAMsH,EAAKC,EAAKC,EAAKE,EAAKjC,EAAKC,EAAKiC,EAAK/B,EAAKC,GACpD7F,KACX,CAEA,SAAA6H,CAAUjH,EAAGwB,EAAIpC,MAEb,OD6PD,SAAmBtB,EAAKC,EAAGiC,GAC9B,IAAIuD,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACRU,EAAIuB,EAAE,GACNtB,EAAIsB,EAAE,GAEVlC,EAAI,GAAKyF,EACTzF,EAAI,GAAK0F,EACT1F,EAAI,GAAK2F,EAET3F,EAAI,GAAK6F,EACT7F,EAAI,GAAK8F,EACT9F,EAAI,GAAK+F,EAET/F,EAAI,GAAKW,EAAI8E,EAAM7E,EAAIiF,EAAMI,EAC7BjG,EAAI,GAAKW,EAAI+E,EAAM9E,EAAIkF,EAAMI,EAC7BlG,EAAI,GAAKW,EAAIgF,EAAM/E,EAAImF,EAAMI,CAEjC,CCvRQ,CAAmB7E,KAAMoC,EAAGxB,GACrBZ,IACX,CAEA,MAAA8H,CAAOlH,EAAGwB,EAAIpC,MAEV,OD2RD,SAAgBtB,EAAKC,EAAGsC,GAC3B,IAAIkD,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR2E,EAAI5D,KAAKwB,IAAID,GACb8G,EAAIrI,KAAKyB,IAAIF,GAEjBvC,EAAI,GAAKqJ,EAAI5D,EAAMb,EAAIiB,EACvB7F,EAAI,GAAKqJ,EAAI3D,EAAMd,EAAIkB,EACvB9F,EAAI,GAAKqJ,EAAI1D,EAAMf,EAAImB,EAEvB/F,EAAI,GAAKqJ,EAAIxD,EAAMjB,EAAIa,EACvBzF,EAAI,GAAKqJ,EAAIvD,EAAMlB,EAAIc,EACvB1F,EAAI,GAAKqJ,EAAItD,EAAMnB,EAAIe,EAEvB3F,EAAI,GAAKiG,EACTjG,EAAI,GAAKkG,EACTlG,EAAI,GAAKmG,CAEb,CCrTQ,CAAgB7E,KAAMoC,EAAGxB,GAClBZ,IACX,CAEA,KAAA0I,CAAM9H,EAAGwB,EAAIpC,MAET,ODyTD,SAAetB,EAAKC,EAAGiC,GAC1B,IAAIvB,EAAIuB,EAAE,GACNtB,EAAIsB,EAAE,GAEVlC,EAAI,GAAKW,EAAIV,EAAE,GACfD,EAAI,GAAKW,EAAIV,EAAE,GACfD,EAAI,GAAKW,EAAIV,EAAE,GAEfD,EAAI,GAAKY,EAAIX,EAAE,GACfD,EAAI,GAAKY,EAAIX,EAAE,GACfD,EAAI,GAAKY,EAAIX,EAAE,GAEfD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,EAEf,CC1UQ,CAAeqB,KAAMoC,EAAGxB,GACjBZ,IACX,CAEA,QAAAvB,CAASmK,EAAIC,GAMT,OALIA,EACA,EAAkB7I,KAAM4I,EAAIC,GAE5B,EAAkB7I,KAAMA,KAAM4I,GAE3B5I,IACX,CAEA,QAAAa,GDuEG,IAAkBnC,ECrEjB,ODqEiBA,ECtECsB,MDuElB,GAAK,EACTtB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EC9EEsB,IACX,CAEA,IAAAe,CAAKqB,GD4BF,IAAc1D,EAAKC,EC1BlB,OD0BkBA,EC3BEyD,GD2BP1D,EC3BCsB,MD4Bd,GAAKrB,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GCnCAqB,IACX,CAEA,WAAA8P,CAAY1N,GDvCT,IAAkB1D,EAAKC,ECyCtB,ODzCsBA,ECwCEyD,GDxCP1D,ECwCCsB,MDvClB,GAAKrB,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,ICgCAqB,IACX,CAEA,cAAA+J,CAAexI,GAEX,ODzBD,SAAkB7C,EAAK6C,GAC1B,IAAIlC,EAAIkC,EAAE,GACNjC,EAAIiC,EAAE,GACNhC,EAAIgC,EAAE,GACN/B,EAAI+B,EAAE,GACNyI,EAAK3K,EAAIA,EACT4K,EAAK3K,EAAIA,EACT4K,EAAK3K,EAAIA,EAET4K,EAAK9K,EAAI2K,EACTI,EAAK9K,EAAI0K,EACTK,EAAK/K,EAAI2K,EACTK,EAAK/K,EAAIyK,EACTO,EAAKhL,EAAI0K,EACTO,EAAKjL,EAAI2K,EACTO,EAAKjL,EAAIwK,EACTU,EAAKlL,EAAIyK,EACTU,EAAKnL,EAAI0K,EAEbxL,EAAI,GAAK,EAAI2L,EAAKG,EAClB9L,EAAI,GAAK0L,EAAKO,EACdjM,EAAI,GAAK4L,EAAKI,EAEdhM,EAAI,GAAK0L,EAAKO,EACdjM,EAAI,GAAK,EAAIyL,EAAKK,EAClB9L,EAAI,GAAK6L,EAAKE,EAEd/L,EAAI,GAAK4L,EAAKI,EACdhM,EAAI,GAAK6L,EAAKE,EACd/L,EAAI,GAAK,EAAIyL,EAAKE,CAGtB,CCRQ,CAAkBrK,KAAMuB,GACjBvB,IACX,CAEA,SAAA+P,CAAUC,EAAOC,EAAOC,GAEpB,OADAlQ,KAAKK,IAAI2P,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIC,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIC,EAAM,GAAIA,EAAM,GAAIA,EAAM,IACxFlQ,IACX,CAEA,OAAAsB,CAAQc,EAAIpC,MAER,ODkGD,SAAgBtB,EAAKC,GACxB,IAAIwF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GAERsJ,EAAMpD,EAAML,EAAMC,EAAMG,EACxBwD,GAAOvD,EAAMN,EAAME,EAAME,EACzB4D,EAAM3D,EAAML,EAAMC,EAAMG,EAGxByG,EAAMjH,EAAM8D,EAAM7D,EAAMgE,EAAM/D,EAAMkE,EAEnC6C,IAGLA,EAAM,EAAMA,EAEZ1M,EAAI,GAAKuJ,EAAMmD,EACf1M,EAAI,KAAOmG,EAAMT,EAAMC,EAAMO,GAAOwG,EACpC1M,EAAI,IAAM+F,EAAML,EAAMC,EAAMG,GAAO4G,EACnC1M,EAAI,GAAK0J,EAAMgD,EACf1M,EAAI,IAAMmG,EAAMV,EAAME,EAAMM,GAAOyG,EACnC1M,EAAI,KAAO+F,EAAMN,EAAME,EAAME,GAAO6G,EACpC1M,EAAI,GAAK6J,EAAM6C,EACf1M,EAAI,KAAOkG,EAAMT,EAAMC,EAAMO,GAAOyG,EACpC1M,EAAI,IAAM8F,EAAML,EAAMC,EAAMG,GAAO6G,EAEvC,CCpIQ,CAAgBpL,KAAMoC,GACfpC,IACX,CAEA,eAAAmQ,CAAgB/N,GAEZ,ODuSD,SAAwB1D,EAAKC,GAChC,IAAIwF,EAAMxF,EAAE,GACRyF,EAAMzF,EAAE,GACR0F,EAAM1F,EAAE,GACR2F,EAAM3F,EAAE,GACR4F,EAAM5F,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACRgG,EAAMhG,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,IACRmG,EAAMnG,EAAE,IACRoG,EAAMpG,EAAE,IACRqG,EAAMrG,EAAE,IACRsG,EAAMtG,EAAE,IACRuG,EAAMvG,EAAE,IAERqJ,EAAM7D,EAAMK,EAAMJ,EAAMG,EACxB0D,EAAM9D,EAAMM,EAAMJ,EAAME,EACxB2D,EAAM/D,EAAMO,EAAMJ,EAAMC,EACxBsG,EAAMzG,EAAMK,EAAMJ,EAAMG,EACxBsG,EAAM1G,EAAMM,EAAMJ,EAAME,EACxBuG,EAAM1G,EAAMK,EAAMJ,EAAMG,EACxBuG,EAAMrG,EAAMK,EAAMJ,EAAMG,EACxBkG,EAAMtG,EAAMM,EAAMJ,EAAME,EACxBmG,EAAMvG,EAAMO,EAAMJ,EAAMC,EACxBoG,EAAMvG,EAAMK,EAAMJ,EAAMG,EACxBmD,EAAMvD,EAAMM,EAAMJ,EAAME,EACxBoD,EAAMvD,EAAMK,EAAMJ,EAAMG,EAGxBmG,EAAMpD,EAAMI,EAAMH,EAAME,EAAMD,EAAMiD,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAEvEI,IAGLA,EAAM,EAAMA,EAEZ1M,EAAI,IAAM8F,EAAM4D,EAAM3D,EAAM0D,EAAMzD,EAAMyG,GAAOC,EAC/C1M,EAAI,IAAM+F,EAAMyG,EAAM3G,EAAM6D,EAAM1D,EAAMuG,GAAOG,EAC/C1M,EAAI,IAAM6F,EAAM4D,EAAM3D,EAAM0G,EAAMxG,EAAMsG,GAAOI,EAE/C1M,EAAI,IAAM2F,EAAM8D,EAAM/D,EAAMgE,EAAM9D,EAAM6G,GAAOC,EAC/C1M,EAAI,IAAMyF,EAAMiE,EAAM/D,EAAM6G,EAAM5G,EAAM2G,GAAOG,EAC/C1M,EAAI,IAAM0F,EAAM8G,EAAM/G,EAAMgE,EAAM7D,EAAM0G,GAAOI,EAE/C1M,EAAI,IAAMsG,EAAM+F,EAAM9F,EAAM6F,EAAM5F,EAAM2F,GAAOO,EAC/C1M,EAAI,IAAMuG,EAAMiD,EAAMnD,EAAMgG,EAAM7F,EAAM+C,GAAOmD,EAC/C1M,EAAI,IAAMqG,EAAM+F,EAAM9F,EAAMkD,EAAMhD,EAAM8C,GAAOoD,EAGnD,CC5VQ,CAAwBpL,KAAMoC,GACvBpC,IACX,ECnEJ,IAAIoQ,EAAK,EAEF,MAAMC,UAAarC,EACtB,WAAAlO,CAAYwQ,GAAI,SAAEC,EAAQ,QAAEC,EAAO,KAAEC,EAAOH,EAAGI,UAAS,cAAEC,GAAgB,EAAI,YAAEC,EAAc,GAAM,CAAC,GACjG7Q,QACKuQ,EAAGO,QAAQC,QAAQC,MAAM,2CAC9B/Q,KAAKsQ,GAAKA,EACVtQ,KAAKgR,GAAKZ,IACVpQ,KAAKuQ,SAAWA,EAChBvQ,KAAKwQ,QAAUA,EACfxQ,KAAKyQ,KAAOA,EAGZzQ,KAAK2Q,cAAgBA,EAGrB3Q,KAAK4Q,YAAcA,EACnB5Q,KAAKiR,gBAAkB,IAAI5J,EAC3BrH,KAAKkR,aAAe,IAAIrB,EACxB7P,KAAKmR,sBAAwB,GAC7BnR,KAAKoR,qBAAuB,EAChC,CAEA,cAAAC,CAAehI,GAEX,OADArJ,KAAKmR,sBAAsB/B,KAAK/F,GACzBrJ,IACX,CAEA,aAAAsR,CAAcjI,GAEV,OADArJ,KAAKoR,qBAAqBhC,KAAK/F,GACxBrJ,IACX,CAEA,IAAAuR,EAAK,OAAEC,GAAW,CAAC,GACXA,IAEKxR,KAAKwQ,QAAQiB,SAASC,aACvBC,OAAOC,OAAO5R,KAAKwQ,QAAQiB,SAAU,CACjCC,YAAa,CAAEG,MAAO,MACtBC,WAAY,CAAED,MAAO,MACrBZ,gBAAiB,CAAEY,MAAO,MAC1BX,aAAc,CAAEW,MAAO,MACvBE,iBAAkB,CAAEF,MAAO,MAC3BG,eAAgB,CAAEH,MAAO,QAKjC7R,KAAKwQ,QAAQiB,SAASM,iBAAiBF,MAAQL,EAAOO,iBACtD/R,KAAKwQ,QAAQiB,SAASO,eAAeH,MAAQL,EAAOS,cACpDjS,KAAKwQ,QAAQiB,SAASK,WAAWD,MAAQL,EAAOM,WAChD9R,KAAKiR,gBAAgBxS,SAAS+S,EAAOM,WAAY9R,KAAKqO,aACtDrO,KAAKkR,aAAaf,gBAAgBnQ,KAAKiR,iBACvCjR,KAAKwQ,QAAQiB,SAASC,YAAYG,MAAQ7R,KAAKqO,YAC/CrO,KAAKwQ,QAAQiB,SAASR,gBAAgBY,MAAQ7R,KAAKiR,gBACnDjR,KAAKwQ,QAAQiB,SAASP,aAAaW,MAAQ7R,KAAKkR,cAEpDlR,KAAKmR,sBAAsBe,SAAS7I,GAAMA,GAAKA,EAAE,CAAE8I,KAAMnS,KAAMwR,aAG/D,IAAIY,EAAYpS,KAAKwQ,QAAQ6B,UAAYrS,KAAKqO,YAAYnK,cAAgB,EAC1ElE,KAAKwQ,QAAQ8B,IAAI,CAAEF,cACnBpS,KAAKuQ,SAASgB,KAAK,CAAEd,KAAMzQ,KAAKyQ,KAAMD,QAASxQ,KAAKwQ,UACpDxQ,KAAKoR,qBAAqBc,SAAS7I,GAAMA,GAAKA,EAAE,CAAE8I,KAAMnS,KAAMwR,YAClE,E,kCChEJ,IAAIpB,EAAK,EAGT,MAAMmC,EAAgB,CAAC,EAEhB,MAAMC,EACT,WAAA1S,CACIwQ,GACA,OACImC,EAAM,SACNC,EAAQ,SACRjB,EAAW,CAAC,EAAC,YAEbkB,GAAc,EAAK,SACnBN,EAAW/B,EAAGsC,KAAI,UAClBC,EAAYvC,EAAGwC,IAAG,UAClBC,GAAY,EAAI,WAChBC,GAAa,EAAI,UACjBC,EAAY3C,EAAG4C,QACf,CAAC,GAEA5C,EAAGO,QAAQC,QAAQC,MAAM,8CAC9B/Q,KAAKsQ,GAAKA,EACVtQ,KAAKyR,SAAWA,EAChBzR,KAAKgR,GAAKZ,IAELqC,GAAQ3B,QAAQqC,KAAK,8BACrBT,GAAU5B,QAAQqC,KAAK,gCAG5BnT,KAAK2S,YAAcA,EACnB3S,KAAKqS,SAAWA,EAChBrS,KAAK6S,UAAYA,EACjB7S,KAAK+S,UAAYA,EACjB/S,KAAKgT,WAAaA,EAClBhT,KAAKiT,UAAYA,EACjBjT,KAAKoT,UAAY,CAAC,EAClBpT,KAAKqT,cAAgB,CAAC,EACtBrT,KAAKsT,YAAc,CAAC,EACpBtT,KAAKuT,UAAY,CAAC,EAGdvT,KAAK2S,cAAgB3S,KAAKoT,UAAUI,MAChCxT,KAAKsQ,GAAGmD,SAASC,mBAAoB1T,KAAK2T,aAAa3T,KAAKsQ,GAAGsD,IAAK5T,KAAKsQ,GAAGuD,qBAC3E7T,KAAK2T,aAAa3T,KAAKsQ,GAAGwD,UAAW9T,KAAKsQ,GAAGuD,sBAItD7T,KAAK+T,aAAezD,EAAG0D,aAAa1D,EAAG2D,eACvCjU,KAAKkU,eAAiB5D,EAAG0D,aAAa1D,EAAG6D,iBACzCnU,KAAKwQ,QAAUF,EAAG8D,gBAClB9D,EAAG+D,aAAarU,KAAKwQ,QAASxQ,KAAK+T,cACnCzD,EAAG+D,aAAarU,KAAKwQ,QAASxQ,KAAKkU,gBAGnClU,KAAKsU,WAAW,CAAE7B,SAAQC,YAC9B,CAEA,UAAA4B,EAAW,OAAE7B,EAAM,SAAEC,IAqBjB,GApBID,IAEAzS,KAAKsQ,GAAGiE,aAAavU,KAAK+T,aAActB,GACxCzS,KAAKsQ,GAAGkE,cAAcxU,KAAK+T,cACyB,KAAhD/T,KAAKsQ,GAAGmE,iBAAiBzU,KAAK+T,eAC9BjD,QAAQqC,KAAK,GAAGnT,KAAKsQ,GAAGmE,iBAAiBzU,KAAK+T,iCAAiCW,EAAejC,OAIlGC,IAEA1S,KAAKsQ,GAAGiE,aAAavU,KAAKkU,eAAgBxB,GAC1C1S,KAAKsQ,GAAGkE,cAAcxU,KAAKkU,gBAC2B,KAAlDlU,KAAKsQ,GAAGmE,iBAAiBzU,KAAKkU,iBAC9BpD,QAAQqC,KAAK,GAAGnT,KAAKsQ,GAAGmE,iBAAiBzU,KAAKkU,qCAAqCQ,EAAehC,OAK1G1S,KAAKsQ,GAAGqE,YAAY3U,KAAKwQ,UACpBxQ,KAAKsQ,GAAGsE,oBAAoB5U,KAAKwQ,QAASxQ,KAAKsQ,GAAGuE,aACnD,OAAO/D,QAAQqC,KAAKnT,KAAKsQ,GAAGwE,kBAAkB9U,KAAKwQ,UAIvDxQ,KAAK+U,iBAAmB,IAAIC,IAC5B,IAAIC,EAAcjV,KAAKsQ,GAAGsE,oBAAoB5U,KAAKwQ,QAASxQ,KAAKsQ,GAAG4E,iBACpE,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAaE,IAAU,CACjD,IAAIC,EAAUpV,KAAKsQ,GAAG+E,iBAAiBrV,KAAKwQ,QAAS2E,GACrDnV,KAAK+U,iBAAiB1U,IAAI+U,EAASpV,KAAKsQ,GAAGgF,mBAAmBtV,KAAKwQ,QAAS4E,EAAQG,OAGpF,MAAMC,EAAQJ,EAAQG,KAAKE,MAAM,UAEjCL,EAAQM,YAAcF,EAAM,GAC5BJ,EAAQO,eAAiBH,EAAMnJ,MAAM,EACzC,CAGArM,KAAK4V,mBAAqB,IAAIZ,IAC9B,MAAMa,EAAY,GACZC,EAAa9V,KAAKsQ,GAAGsE,oBAAoB5U,KAAKwQ,QAASxQ,KAAKsQ,GAAGyF,mBACrE,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAYE,IAAU,CAChD,MAAMC,EAAYjW,KAAKsQ,GAAG4F,gBAAgBlW,KAAKwQ,QAASwF,GAClDG,EAAWnW,KAAKsQ,GAAG8F,kBAAkBpW,KAAKwQ,QAASyF,EAAUV,OAEjD,IAAdY,IACJN,EAAUM,GAAYF,EAAUV,KAChCvV,KAAK4V,mBAAmBvV,IAAI4V,EAAWE,GAC3C,CACAnW,KAAKqW,eAAiBR,EAAUS,KAAK,GACzC,CAEA,YAAA3C,CAAaH,EAAK+C,EAAKC,EAAUC,GAC7BzW,KAAKoT,UAAUI,IAAMA,EACrBxT,KAAKoT,UAAUmD,IAAMA,EACrBvW,KAAKoT,UAAUoD,SAAWA,EAC1BxW,KAAKoT,UAAUqD,SAAWA,EACtBjD,IAAKxT,KAAK2S,aAAc,EAChC,CAEA,gBAAA+D,CAAiBC,EAASC,GACtB5W,KAAKqT,cAAcsD,QAAUA,EAC7B3W,KAAKqT,cAAcuD,UAAYA,CACnC,CAEA,cAAAC,CAAeC,EAAMC,EAAKC,GACtBhX,KAAKiX,WAAaF,EAClB/W,KAAKsT,YAAYwD,KAAOA,EACxB9W,KAAKsT,YAAYyD,IAAMA,EACvB/W,KAAKsT,YAAY0D,KAAOA,CAC5B,CAEA,YAAAE,CAAaC,EAAaC,EAAWC,GACjCrX,KAAKuT,UAAU4D,YAAcA,EAC7BnX,KAAKuT,UAAU6D,UAAYA,EAC3BpX,KAAKuT,UAAU8D,UAAYA,CAC/B,CAEA,UAAAC,GACQtX,KAAK+S,UAAW/S,KAAKsQ,GAAGmD,SAAS8D,OAAOvX,KAAKsQ,GAAGkH,YAC/CxX,KAAKsQ,GAAGmD,SAASgE,QAAQzX,KAAKsQ,GAAGkH,YAElCxX,KAAKqS,SAAUrS,KAAKsQ,GAAGmD,SAAS8D,OAAOvX,KAAKsQ,GAAGoH,WAC9C1X,KAAKsQ,GAAGmD,SAASgE,QAAQzX,KAAKsQ,GAAGoH,WAElC1X,KAAKoT,UAAUI,IAAKxT,KAAKsQ,GAAGmD,SAAS8D,OAAOvX,KAAKsQ,GAAGqH,OACnD3X,KAAKsQ,GAAGmD,SAASgE,QAAQzX,KAAKsQ,GAAGqH,OAElC3X,KAAKqS,UAAUrS,KAAKsQ,GAAGmD,SAASmE,YAAY5X,KAAKqS,UACrDrS,KAAKsQ,GAAGmD,SAASoE,aAAa7X,KAAK6S,WACnC7S,KAAKsQ,GAAGmD,SAASqE,aAAa9X,KAAKgT,YACnChT,KAAKsQ,GAAGmD,SAASsE,aAAa/X,KAAKiT,WAC/BjT,KAAKoT,UAAUI,KAAKxT,KAAKsQ,GAAGmD,SAASE,aAAa3T,KAAKoT,UAAUI,IAAKxT,KAAKoT,UAAUmD,IAAKvW,KAAKoT,UAAUoD,SAAUxW,KAAKoT,UAAUqD,UACtIzW,KAAKsQ,GAAGmD,SAASiD,iBAAiB1W,KAAKqT,cAAcsD,QAAS3W,KAAKqT,cAAcuD,WAE9E5W,KAAKsT,YAAYwD,MAAQ9W,KAAKuT,UAAU4D,YAAanX,KAAKsQ,GAAGmD,SAAS8D,OAAOvX,KAAKsQ,GAAG0H,cAC/EhY,KAAKsQ,GAAGmD,SAASgE,QAAQzX,KAAKsQ,GAAG0H,cAE1ChY,KAAKsQ,GAAGmD,SAASoD,eAAe7W,KAAKsT,YAAYwD,KAAM9W,KAAKsT,YAAYyD,IAAK/W,KAAKsT,YAAY0D,MAC9FhX,KAAKsQ,GAAGmD,SAASyD,aAAalX,KAAKuT,UAAU4D,YAAanX,KAAKuT,UAAU6D,UAAWpX,KAAKuT,UAAU8D,UAEvG,CAEA,GAAA/E,EAAI,UAAEF,GAAY,GAAU,CAAC,GACzB,IAAI6F,GAAe,EACGjY,KAAKsQ,GAAGmD,SAASyE,MAAMC,iBAAmBnY,KAAKgR,KAIjEhR,KAAKsQ,GAAG8H,WAAWpY,KAAKwQ,SACxBxQ,KAAKsQ,GAAGmD,SAASyE,MAAMC,eAAiBnY,KAAKgR,IAIjDhR,KAAK+U,iBAAiB7C,SAAQ,CAACiE,EAAUkC,KACrC,IAAIjD,EAAUpV,KAAKyR,SAAS4G,EAAc3C,aAE1C,IAAK,MAAM4C,KAAaD,EAAc1C,eAAgB,CAClD,IAAKP,EAAS,MAEd,KAAIkD,KAAalD,GAEV,IAAIvV,MAAM0Y,QAAQnD,EAAQvD,OAC7B,MAEAuD,OAAUxG,EACV,KACJ,CANIwG,EAAUA,EAAQkD,EAO1B,CAEA,IAAKlD,EACD,OAAOjC,EAAK,kBAAkBkF,EAAc9C,8BAGhD,GAAIH,QAA6BxG,IAAlBwG,EAAQvD,MACnB,OAAOsB,EAAK,GAAGkF,EAAc9C,6CAGjC,GAAIH,EAAQvD,MAAM2G,QAKd,OAJAP,GAA4B,EAG5B7C,EAAQvD,MAAM4G,OAAOR,GACdS,EAAW1Y,KAAKsQ,GAAI+H,EAAcM,KAAMxC,EAAU8B,GAI7D,GAAI7C,EAAQvD,MAAM/Q,QAAUsU,EAAQvD,MAAM,GAAG2G,QAAS,CAClD,MAAMI,EAAe,GAOrB,OANAxD,EAAQvD,MAAMK,SAASL,IACnBoG,GAA4B,EAC5BpG,EAAM4G,OAAOR,GACbW,EAAaxJ,KAAK6I,EAAY,IAG3BS,EAAW1Y,KAAKsQ,GAAI+H,EAAcM,KAAMxC,EAAUyC,EAC7D,CAEAF,EAAW1Y,KAAKsQ,GAAI+H,EAAcM,KAAMxC,EAAUf,EAAQvD,MAAM,IAGpE7R,KAAKsX,aACDlF,GAAWpS,KAAKsQ,GAAGmD,SAASoE,aAAa7X,KAAK6S,YAAc7S,KAAKsQ,GAAGwC,IAAM9S,KAAKsQ,GAAGuI,GAAK7Y,KAAKsQ,GAAGwC,IACvG,CAEA,MAAAgG,GACI9Y,KAAKsQ,GAAGyI,cAAc/Y,KAAKwQ,QAC/B,EAGJ,SAASkI,EAAWpI,EAAIqI,EAAMxC,EAAUtE,GACpCA,EAAQA,EAAM/Q,OA8DlB,SAAiBnC,GACb,MAAMqa,EAAWra,EAAEmC,OACbmY,EAAWta,EAAE,GAAGmC,OACtB,QAAiB8N,IAAbqK,EAAwB,OAAOta,EACnC,MAAMmC,EAASkY,EAAWC,EAC1B,IAAIpH,EAAQU,EAAczR,GACrB+Q,IAAOU,EAAczR,GAAU+Q,EAAQ,IAAIqH,aAAapY,IAC7D,IAAK,IAAIyB,EAAI,EAAGA,EAAIyW,EAAUzW,IAAKsP,EAAMxR,IAAI1B,EAAE4D,GAAIA,EAAI0W,GACvD,OAAOpH,CACX,CAvE2BsH,CAAQtH,GAASA,EACxC,MAAMuH,EAAW9I,EAAGmD,SAASyE,MAAMnD,iBAAiBsE,IAAIlD,GAGxD,GAAItE,EAAM/Q,OACN,QAAiB8N,IAAbwK,GAA0BA,EAAStY,SAAW+Q,EAAM/Q,OAEpDwP,EAAGmD,SAASyE,MAAMnD,iBAAiB1U,IAAI8V,EAAUtE,EAAMxF,MAAM,QAC1D,CACH,GAgEZ,SAAqB1N,EAAGC,GACpB,GAAID,EAAEmC,SAAWlC,EAAEkC,OAAQ,OAAO,EAClC,IAAK,IAAIyB,EAAI,EAAGkN,EAAI9Q,EAAEmC,OAAQyB,EAAIkN,EAAGlN,IACjC,GAAI5D,EAAE4D,KAAO3D,EAAE2D,GAAI,OAAO,EAE9B,OAAO,CACX,CAtEgB+W,CAAYF,EAAUvH,GAAQ,OAGlCuH,EAAS/Y,IAAM+Y,EAAS/Y,IAAIwR,GAqExC,SAAkBlT,EAAGC,GACjB,IAAK,IAAI2D,EAAI,EAAGkN,EAAI9Q,EAAEmC,OAAQyB,EAAIkN,EAAGlN,IACjC5D,EAAE4D,GAAK3D,EAAE2D,EAEjB,CAzEiDgX,CAASH,EAAUvH,GACxDvB,EAAGmD,SAASyE,MAAMnD,iBAAiB1U,IAAI8V,EAAUiD,EACrD,KACG,CACH,GAAIA,IAAavH,EAAO,OACxBvB,EAAGmD,SAASyE,MAAMnD,iBAAiB1U,IAAI8V,EAAUtE,EACrD,CAEA,OAAQ8G,GACJ,KAAK,KACD,OAAO9G,EAAM/Q,OAASwP,EAAGkJ,WAAWrD,EAAUtE,GAASvB,EAAGmJ,UAAUtD,EAAUtE,GAClF,KAAK,MACD,OAAOvB,EAAGoJ,WAAWvD,EAAUtE,GACnC,KAAK,MACD,OAAOvB,EAAGqJ,WAAWxD,EAAUtE,GACnC,KAAK,MACD,OAAOvB,EAAGsJ,WAAWzD,EAAUtE,GACnC,KAAK,MACL,KAAK,KACL,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACD,OAAOA,EAAM/Q,OAASwP,EAAGuJ,WAAW1D,EAAUtE,GAASvB,EAAGwJ,UAAU3D,EAAUtE,GAClF,KAAK,MACL,KAAK,MACD,OAAOvB,EAAGyJ,WAAW5D,EAAUtE,GACnC,KAAK,MACL,KAAK,MACD,OAAOvB,EAAG0J,WAAW7D,EAAUtE,GACnC,KAAK,MACL,KAAK,MACD,OAAOvB,EAAG2J,WAAW9D,EAAUtE,GACnC,KAAK,MACD,OAAOvB,EAAG4J,iBAAiB/D,GAAU,EAAOtE,GAChD,KAAK,MACD,OAAOvB,EAAG6J,iBAAiBhE,GAAU,EAAOtE,GAChD,KAAK,MACD,OAAOvB,EAAG8J,iBAAiBjE,GAAU,EAAOtE,GAExD,CAEA,SAAS6C,EAAe2F,GACpB,IAAIC,EAAQD,EAAO7E,MAAM,MACzB,IAAK,IAAIjT,EAAI,EAAGA,EAAI+X,EAAMxZ,OAAQyB,IAC9B+X,EAAM/X,GAAKA,EAAI,EAAI,KAAO+X,EAAM/X,GAEpC,OAAO+X,EAAMhE,KAAK,KACtB,CA2BA,IAAIiE,EAAY,EAChB,SAASpH,EAAKqH,GACND,EAAY,MAChBzJ,QAAQqC,KAAKqH,GACbD,IACIA,EAAY,KAAKzJ,QAAQqC,KAAK,mDACtC,C,kCC5TA,MAAMsH,EAA2B,I,QAAI,GACrC,IAAIrK,EAAK,EAEF,MAAMsK,EACT,WAAA5a,EAAY,OACR+Q,EAAS8J,SAASC,cAAc,UAAS,MACzCC,EAAQ,IAAG,OACXC,EAAS,IAAG,IACZC,EAAM,EAAC,MACPC,GAAQ,EAAK,MACbC,GAAQ,EAAI,QACZC,GAAU,EAAK,UACfC,GAAY,EAAK,mBACjBzH,GAAqB,EAAK,sBAC1B0H,GAAwB,EAAK,gBAC7BC,EAAkB,UAAS,UAC3BC,GAAY,EAAI,MAChBC,EAAQ,GACR,CAAC,GACD,MAAMC,EAAa,CAAER,QAAOC,QAAOC,UAASC,YAAWzH,qBAAoB0H,wBAAuBC,mBAClGrb,KAAK+a,IAAMA,EACX/a,KAAKgb,MAAQA,EACbhb,KAAKyb,OAAQ,EACbzb,KAAKib,MAAQA,EACbjb,KAAKkb,QAAUA,EACflb,KAAK0T,mBAAqBA,EAC1B1T,KAAKsb,UAAYA,EACjBtb,KAAKgR,GAAKZ,IAGI,IAAVmL,IAAavb,KAAKsQ,GAAKO,EAAO6K,WAAW,SAAUF,IACvDxb,KAAK2b,WAAa3b,KAAKsQ,GAClBtQ,KAAKsQ,KAAItQ,KAAKsQ,GAAKO,EAAO6K,WAAW,QAASF,IAC9Cxb,KAAKsQ,IAAIQ,QAAQC,MAAM,kCAG5B/Q,KAAKsQ,GAAGmD,SAAWzT,KAGnBA,KAAK4b,QAAQf,EAAOC,GAGpB9a,KAAKkY,MAAQ,CAAC,EACdlY,KAAKkY,MAAM9E,UAAY,CAAEI,IAAKxT,KAAKsQ,GAAGsD,IAAK2C,IAAKvW,KAAKsQ,GAAGuL,MACxD7b,KAAKkY,MAAM7E,cAAgB,CAAEsD,QAAS3W,KAAKsQ,GAAGwL,UAC9C9b,KAAKkY,MAAM7F,UAAW,EACtBrS,KAAKkY,MAAMrF,UAAY7S,KAAKsQ,GAAGwC,IAC/B9S,KAAKkY,MAAM6D,WAAY,EACvB/b,KAAKkY,MAAMjF,UAAYjT,KAAKsQ,GAAG4C,OAC/BlT,KAAKkY,MAAM8D,kBAAmB,EAC9Bhc,KAAKkY,MAAM+D,OAAQ,EACnBjc,KAAKkY,MAAMgE,gBAAkB,EAC7Blc,KAAKkY,MAAMiE,YAAc,KACzBnc,KAAKkY,MAAMkE,SAAW,CAAE/c,EAAG,EAAGC,EAAG,EAAGub,MAAO,KAAMC,OAAQ,MACzD9a,KAAKkY,MAAMU,aAAe,GAC1B5Y,KAAKkY,MAAMmE,kBAAoB,EAC/Brc,KAAKkY,MAAMoE,YAAc,KACzBtc,KAAKkY,MAAMnD,iBAAmB,IAAIC,IAClChV,KAAKkY,MAAMC,eAAiB,KAG5BnY,KAAKuc,WAAa,CAAC,EAGfvc,KAAK2b,UACL3b,KAAKwc,aAAa,0BAClBxc,KAAKwc,aAAa,8BAElBxc,KAAKwc,aAAa,qBAClBxc,KAAKwc,aAAa,4BAClBxc,KAAKwc,aAAa,0BAClBxc,KAAKwc,aAAa,iCAClBxc,KAAKwc,aAAa,0BAClBxc,KAAKwc,aAAa,4BAClBxc,KAAKwc,aAAa,YAClBxc,KAAKwc,aAAa,uBAClBxc,KAAKwc,aAAa,uBAEtBxc,KAAKwc,aAAa,iCAClBxc,KAAKwc,aAAa,gCAClBxc,KAAKwc,aAAa,iCAClBxc,KAAKwc,aAAa,iCAClBxc,KAAKwc,aAAa,kCAClBxc,KAAKwc,aAAa,yCAGlBxc,KAAKyc,oBAAsBzc,KAAKwc,aAAa,yBAA0B,sBAAuB,4BAC9Fxc,KAAK0c,oBAAsB1c,KAAKwc,aAAa,yBAA0B,sBAAuB,4BAC9Fxc,KAAK2c,sBAAwB3c,KAAKwc,aAAa,yBAA0B,wBAAyB,8BAClGxc,KAAK4c,kBAAoB5c,KAAKwc,aAAa,0BAA2B,oBAAqB,wBAC3Fxc,KAAK6c,gBAAkB7c,KAAKwc,aAAa,0BAA2B,kBAAmB,sBACvFxc,KAAK8c,kBAAoB9c,KAAKwc,aAAa,0BAA2B,oBAAqB,wBAC3Fxc,KAAK+c,YAAc/c,KAAKwc,aAAa,qBAAsB,cAAe,oBAG1Exc,KAAKgd,WAAa,CAAC,EACnBhd,KAAKgd,WAAWC,gBAAkBjd,KAAKsQ,GAAG4M,aAAald,KAAKsQ,GAAG6M,kCAC/Dnd,KAAKgd,WAAWI,cAAgBpd,KAAKwc,aAAa,kCAC5Cxc,KAAKsQ,GAAG4M,aAAald,KAAKwc,aAAa,kCAAkCa,gCACzE,CACV,CAEA,OAAAzB,CAAQf,EAAOC,GACX9a,KAAK6a,MAAQA,EACb7a,KAAK8a,OAASA,EAEd9a,KAAKsQ,GAAGO,OAAOgK,MAAQA,EAAQ7a,KAAK+a,IACpC/a,KAAKsQ,GAAGO,OAAOiK,OAASA,EAAS9a,KAAK+a,IAEjC/a,KAAKsQ,GAAGO,OAAOyM,OACpB3L,OAAOC,OAAO5R,KAAKsQ,GAAGO,OAAOyM,MAAO,CAChCzC,MAAOA,EAAQ,KACfC,OAAQA,EAAS,MAEzB,CAEA,WAAAyC,CAAY1C,EAAOC,EAAQzb,EAAI,EAAGC,EAAI,GAC9BU,KAAKkY,MAAMkE,SAASvB,QAAUA,GAAS7a,KAAKkY,MAAMkE,SAAStB,SAAWA,IAC1E9a,KAAKkY,MAAMkE,SAASvB,MAAQA,EAC5B7a,KAAKkY,MAAMkE,SAAStB,OAASA,EAC7B9a,KAAKkY,MAAMkE,SAAS/c,EAAIA,EACxBW,KAAKkY,MAAMkE,SAAS9c,EAAIA,EACxBU,KAAKsQ,GAAG8L,SAAS/c,EAAGC,EAAGub,EAAOC,GAClC,CAEA,UAAA0C,CAAW3C,EAAOC,EAAQzb,EAAI,EAAGC,EAAI,GACjCU,KAAKsQ,GAAGmN,QAAQpe,EAAGC,EAAGub,EAAOC,EACjC,CAEA,MAAAvD,CAAOvG,IACoB,IAAnBhR,KAAKkY,MAAMlH,KACfhR,KAAKsQ,GAAGiH,OAAOvG,GACfhR,KAAKkY,MAAMlH,IAAM,EACrB,CAEA,OAAAyG,CAAQzG,IACmB,IAAnBhR,KAAKkY,MAAMlH,KACfhR,KAAKsQ,GAAGmH,QAAQzG,GAChBhR,KAAKkY,MAAMlH,IAAM,EACrB,CAEA,YAAA2C,CAAaH,EAAK+C,EAAKC,EAAUC,GAEzBzW,KAAKkY,MAAM9E,UAAUI,MAAQA,GAC7BxT,KAAKkY,MAAM9E,UAAUmD,MAAQA,GAC7BvW,KAAKkY,MAAM9E,UAAUoD,WAAaA,GAClCxW,KAAKkY,MAAM9E,UAAUqD,WAAaA,IAGtCzW,KAAKkY,MAAM9E,UAAUI,IAAMA,EAC3BxT,KAAKkY,MAAM9E,UAAUmD,IAAMA,EAC3BvW,KAAKkY,MAAM9E,UAAUoD,SAAWA,EAChCxW,KAAKkY,MAAM9E,UAAUqD,SAAWA,OACf7H,IAAb4H,EAAwBxW,KAAKsQ,GAAGoN,kBAAkBlK,EAAK+C,EAAKC,EAAUC,GACrEzW,KAAKsQ,GAAG8C,UAAUI,EAAK+C,GAChC,CAEA,gBAAAG,CAAiBC,EAASC,GACtBD,EAAUA,GAAW3W,KAAKsQ,GAAGwL,SACzB9b,KAAKkY,MAAM7E,cAAcsD,UAAYA,GAAW3W,KAAKkY,MAAM7E,cAAcuD,YAAcA,IAC3F5W,KAAKkY,MAAM7E,cAAcsD,QAAUA,EACnC3W,KAAKkY,MAAM7E,cAAcuD,UAAYA,OACnBhI,IAAdgI,EAAyB5W,KAAKsQ,GAAGqN,sBAAsBhH,EAASC,GAC/D5W,KAAKsQ,GAAG+C,cAAcsD,GAC/B,CAEA,WAAAiB,CAAY/F,GACJ7R,KAAKkY,MAAM7F,WAAaR,IAC5B7R,KAAKkY,MAAM7F,SAAWR,EACtB7R,KAAKsQ,GAAG+B,SAASR,GACrB,CAEA,YAAAgG,CAAahG,GACL7R,KAAKkY,MAAMrF,YAAchB,IAC7B7R,KAAKkY,MAAMrF,UAAYhB,EACvB7R,KAAKsQ,GAAGuC,UAAUhB,GACtB,CAEA,YAAAiG,CAAajG,GACL7R,KAAKkY,MAAM6D,YAAclK,IAC7B7R,KAAKkY,MAAM6D,UAAYlK,EACvB7R,KAAKsQ,GAAGyL,UAAUlK,GACtB,CAEA,YAAAkG,CAAalG,GACL7R,KAAKkY,MAAMjF,YAAcpB,IAC7B7R,KAAKkY,MAAMjF,UAAYpB,EACvB7R,KAAKsQ,GAAG2C,UAAUpB,GACtB,CAEA,cAAA+L,CAAe/L,GACR7R,KAAKkY,MAAM2F,cAAgBhM,IAC9B7R,KAAKkY,MAAM2F,YAAchM,EACzB7R,KAAKsQ,GAAGuN,YAAYhM,GACxB,CAEA,cAAAgF,CAAeC,EAAMC,EAAKC,GAElBhX,KAAKkY,MAAM5E,cAAgBwD,GAC1B9W,KAAKkY,MAAMjB,aAAeF,GAC1B/W,KAAKkY,MAAM4F,kBAAoB9G,IAGpChX,KAAKkY,MAAM5E,YAAcwD,GAAQ9W,KAAKsQ,GAAGyN,OACzC/d,KAAKkY,MAAMjB,WAAaF,GAAO,EAC/B/W,KAAKkY,MAAM4F,gBAAkB9G,GAAQ,EAErChX,KAAKsQ,GAAGgD,YAAYwD,GAAQ9W,KAAKsQ,GAAGyN,OAAQhH,GAAO,EAAGC,GAAQ,GAClE,CAEA,YAAAE,CAAaC,EAAaC,EAAWC,GAE9BrX,KAAKkY,MAAMf,cAAgBA,GAC1BnX,KAAKkY,MAAM8F,mBAAqB5G,GAChCpX,KAAKkY,MAAM+F,mBAAqB5G,IAGpCrX,KAAKkY,MAAMf,YAAcA,EACzBnX,KAAKkY,MAAM8F,iBAAmB5G,EAC9BpX,KAAKkY,MAAM+F,iBAAmB5G,EAE9BrX,KAAKsQ,GAAGiD,UAAU4D,EAAaC,EAAWC,GAE9C,CAEA,aAAA6G,CAAcrM,GACN7R,KAAKkY,MAAMmE,oBAAsBxK,IACrC7R,KAAKkY,MAAMmE,kBAAoBxK,EAC/B7R,KAAKsQ,GAAG4N,cAAcle,KAAKsQ,GAAG6N,SAAWtM,GAC7C,CAEA,eAAAuM,EAAgB,OAAE9d,EAASN,KAAKsQ,GAAG+N,YAAW,OAAEC,EAAS,MAAS,CAAC,GAC3Dte,KAAKkY,MAAMiE,cAAgBmC,IAC/Bte,KAAKkY,MAAMiE,YAAcmC,EACzBte,KAAKsQ,GAAG8N,gBAAgB9d,EAAQge,GACpC,CAEA,YAAA9B,CAAa+B,EAAWC,EAAYC,GAEhC,OAAID,GAAcxe,KAAKsQ,GAAGkO,GAAoBxe,KAAKsQ,GAAGkO,GAAYE,KAAK1e,KAAKsQ,KAGvEtQ,KAAKuc,WAAWgC,KACjBve,KAAKuc,WAAWgC,GAAave,KAAKsQ,GAAGkM,aAAa+B,IAIjDC,EAGAxe,KAAKuc,WAAWgC,GAGdve,KAAKuc,WAAWgC,GAAWE,GAASC,KAAK1e,KAAKuc,WAAWgC,IAHxB,KAHhBve,KAAKuc,WAAWgC,GAO5C,CAEA,UAAAI,CAAWhgB,EAAGC,GACV,OAAID,EAAEiS,cAAgBhS,EAAEgS,YACbjS,EAAEiS,YAAchS,EAAEgS,YAClBjS,EAAE6R,QAAQQ,KAAOpS,EAAE4R,QAAQQ,GAC3BrS,EAAE6R,QAAQQ,GAAKpS,EAAE4R,QAAQQ,GACzBrS,EAAEigB,SAAWhgB,EAAEggB,OACfjgB,EAAEigB,OAAShgB,EAAEggB,OAEbhgB,EAAEoS,GAAKrS,EAAEqS,EAExB,CAEA,eAAA6N,CAAgBlgB,EAAGC,GACf,OAAID,EAAEiS,cAAgBhS,EAAEgS,YACbjS,EAAEiS,YAAchS,EAAEgS,YAEzBjS,EAAEigB,SAAWhgB,EAAEggB,OACRhgB,EAAEggB,OAASjgB,EAAEigB,OAEbhgB,EAAEoS,GAAKrS,EAAEqS,EAExB,CAEA,MAAA8N,CAAOngB,EAAGC,GACN,OAAID,EAAEiS,cAAgBhS,EAAEgS,YACbjS,EAAEiS,YAAchS,EAAEgS,YAClBjS,EAAE6R,QAAQQ,KAAOpS,EAAE4R,QAAQQ,GAC3BrS,EAAE6R,QAAQQ,GAAKpS,EAAE4R,QAAQQ,GAEzBpS,EAAEoS,GAAKrS,EAAEqS,EAExB,CAEA,aAAA+N,EAAc,MAAEC,EAAK,OAAExN,EAAM,YAAEyN,EAAW,KAAEC,IACxC,IAAIC,EAAa,GAgBjB,GAdI3N,GAAUyN,GAAazN,EAAO4N,gBAGlCJ,EAAMtP,UAAU2P,IACZ,IAAKA,EAAKlR,QAAS,OAAO,EACrBkR,EAAK9N,OAEN0N,GAAeI,EAAK1O,eAAiBa,IAChCA,EAAO8N,sBAAsBD,IAGtCF,EAAW/P,KAAKiQ,GAAK,IAGrBH,EAAM,CACN,MAAMK,EAAS,GACT5M,EAAc,GACd6M,EAAK,GAEXL,EAAWjN,SAASmN,IAEXA,EAAK7O,QAAQmC,YAEP0M,EAAK7O,QAAQuC,UACpBJ,EAAYvD,KAAKiQ,GAEjBG,EAAGpQ,KAAKiQ,GAJRE,EAAOnQ,KAAKiQ,GAOhBA,EAAKT,OAAS,EAGW,IAArBS,EAAKzO,aAAsByO,EAAK7O,QAAQuC,WAAcvB,IAG1D6N,EAAKhR,YAAY5B,eAAegO,GAChCA,EAASgF,aAAajO,EAAOkO,sBAC7BL,EAAKT,OAASnE,EAASlb,EAAC,IAG5BggB,EAAOL,KAAKlf,KAAK2e,YACjBhM,EAAYuM,KAAKlf,KAAK6e,iBACtBW,EAAGN,KAAKlf,KAAK8e,QAEbK,EAAaI,EAAOI,OAAOhN,EAAa6M,EAC5C,CAEA,OAAOL,CACX,CAEA,MAAAS,EAAO,MAAEZ,EAAK,OAAExN,EAAM,OAAElR,EAAS,KAAI,OAAEmY,GAAS,EAAI,KAAEyG,GAAO,EAAI,YAAED,GAAc,EAAI,MAAEY,IACpE,OAAXvf,GAEAN,KAAKoe,kBACLpe,KAAKud,YAAYvd,KAAK6a,MAAQ7a,KAAK+a,IAAK/a,KAAK8a,OAAS9a,KAAK+a,OAG3D/a,KAAKoe,gBAAgB9d,GACrBN,KAAKud,YAAYjd,EAAOua,MAAOva,EAAOwa,UAGtC+E,GAAU7f,KAAKsb,YAAuB,IAAVuE,MAExB7f,KAAKib,OAAW3a,IAAUA,EAAO2a,QACjCjb,KAAKuX,OAAOvX,KAAKsQ,GAAGkH,YACpBxX,KAAK8X,cAAa,KAInB9X,KAAKkb,UAAa5a,GAAUA,EAAO4a,WAClClb,KAAKuX,OAAOvX,KAAKsQ,GAAG0H,cACpBhY,KAAK4d,eAAe,MAGxB5d,KAAKsQ,GAAGuP,OACH7f,KAAKyb,MAAQzb,KAAKsQ,GAAGwP,iBAAmB,IACpC9f,KAAKib,MAAQjb,KAAKsQ,GAAGyP,iBAAmB,IACxC/f,KAAKkb,QAAUlb,KAAKsQ,GAAG0P,mBAAqB,KAKrDvH,GAAQuG,EAAM1P,oBAGdkC,GAAQA,EAAOlC,oBAGAtP,KAAK+e,cAAc,CAAEC,QAAOxN,SAAQyN,cAAaC,SAEzDhN,SAASmN,IAChBA,EAAK9N,KAAK,CAAEC,UAAS,GAE7B,E,+CCzXJ,MAAMiJ,EAA2B,IAAIhM,EAAA,EAErC,IAAI2B,EAAK,EACL6P,EAAU,EAGVC,GAAiB,EAEd,MAAMC,EACT,WAAArgB,CAAYwQ,EAAIkL,EAAa,CAAC,GACrBlL,EAAGO,QAAQC,QAAQC,MAAM,+CAC9B/Q,KAAKsQ,GAAKA,EACVtQ,KAAKwb,WAAaA,EAClBxb,KAAKgR,GAAKZ,IAGVpQ,KAAKogB,KAAO,CAAC,EAEbpgB,KAAKqgB,UAAY,CAAEC,MAAO,EAAGC,MAAO,GACpCvgB,KAAKwgB,eAAiB,EAGtBxgB,KAAKsQ,GAAGmD,SAASoJ,gBAAgB,MACjC7c,KAAKsQ,GAAGmD,SAASgN,gBAAkB,KAGnCzgB,KAAK0gB,QAAU1gB,KAAKsQ,GAAGmD,SAASyE,MAGhC,IAAK,IAAIyI,KAAOnF,EACZxb,KAAK4gB,aAAaD,EAAKnF,EAAWmF,GAE1C,CAEA,YAAAC,CAAaD,EAAKE,GA4Bd,GA3BA7gB,KAAKwb,WAAWmF,GAAOE,EAGvBA,EAAK7P,GAAKiP,IACVY,EAAKC,KAAOD,EAAKC,MAAQ,EACzBD,EAAKlI,KACDkI,EAAKlI,OACJkI,EAAKE,KAAKjhB,cAAgBoZ,aACrBlZ,KAAKsQ,GAAG0Q,MACRH,EAAKE,KAAKjhB,cAAgBmhB,YAC1BjhB,KAAKsQ,GAAG4Q,eACRlhB,KAAKsQ,GAAG6Q,cAClBN,EAAKvgB,OAAiB,UAARqgB,EAAkB3gB,KAAKsQ,GAAG8Q,qBAAuBphB,KAAKsQ,GAAG+Q,aACvER,EAAKS,WAAaT,EAAKS,aAAc,EACrCT,EAAKU,OAASV,EAAKU,QAAU,EAC7BV,EAAKW,OAASX,EAAKW,QAAU,EAC7BX,EAAKN,MAAQM,EAAKN,QAAUM,EAAKU,OAASV,EAAKE,KAAKU,WAAaZ,EAAKU,OAASV,EAAKE,KAAKjgB,OAAS+f,EAAKC,MACvGD,EAAKa,QAAUb,EAAKc,WAAa,EACjCd,EAAKe,aAAc,EACnBf,EAAKgB,MAAQhB,EAAKgB,OAAS7hB,KAAKsQ,GAAGwR,YAE9BjB,EAAKvC,QAENte,KAAK+hB,gBAAgBlB,GAIrBA,EAAKa,QAAS,CAEd,GADA1hB,KAAKgiB,aAAc,EACfhiB,KAAKwgB,gBAAkBxgB,KAAKwgB,iBAAmBK,EAAKN,MAAQM,EAAKa,QAEjE,OADA5Q,QAAQqC,KAAK,+DACLnT,KAAKwgB,eAAiB9gB,KAAKoO,IAAI9N,KAAKwgB,eAAgBK,EAAKN,MAAQM,EAAKa,SAElF1hB,KAAKwgB,eAAiBK,EAAKN,MAAQM,EAAKa,OAC5C,KAAmB,UAARf,EACP3gB,KAAKqgB,UAAUE,MAAQM,EAAKN,MACpBvgB,KAAKwb,WAAWyG,QACxBjiB,KAAKqgB,UAAUE,MAAQ7gB,KAAKiN,IAAI3M,KAAKqgB,UAAUE,MAAOM,EAAKN,OAEnE,CAEA,eAAAwB,CAAgBlB,GACZ,MAAMqB,GAAerB,EAAKvC,OACtB4D,IAAarB,EAAKvC,OAASte,KAAKsQ,GAAG6R,gBACnCniB,KAAK0gB,QAAQpE,cAAgBuE,EAAKvC,SAClCte,KAAKsQ,GAAG8R,WAAWvB,EAAKvgB,OAAQugB,EAAKvC,QACrCte,KAAK0gB,QAAQpE,YAAcuE,EAAKvC,QAEhC4D,EACAliB,KAAKsQ,GAAG+R,WAAWxB,EAAKvgB,OAAQugB,EAAKE,KAAMF,EAAKgB,OAEhD7hB,KAAKsQ,GAAGgS,cAAczB,EAAKvgB,OAAQ,EAAGugB,EAAKE,MAE/CF,EAAKe,aAAc,CACvB,CAEA,QAAAW,CAAS1Q,GACL7R,KAAK4gB,aAAa,QAAS/O,EAC/B,CAEA,YAAA2Q,CAAalC,EAAOC,GAChBvgB,KAAKqgB,UAAUC,MAAQA,EACvBtgB,KAAKqgB,UAAUE,MAAQA,CAC3B,CAEA,iBAAAkC,CAAkB5Q,GACd7R,KAAKwgB,eAAiB3O,CAC1B,CAEA,SAAA6Q,CAAUlS,GACNxQ,KAAKogB,KAAK5P,EAAQ6F,gBAAkBrW,KAAKsQ,GAAGmD,SAASmJ,oBACrD5c,KAAKsQ,GAAGmD,SAASoJ,gBAAgB7c,KAAKogB,KAAK5P,EAAQ6F,iBACnDrW,KAAK2iB,eAAenS,EACxB,CAEA,cAAAmS,CAAenS,GAEXA,EAAQoF,mBAAmB1D,SAAQ,CAACiE,GAAYZ,OAAMoD,WAElD,IAAK3Y,KAAKwb,WAAWjG,GAEjB,YADAzE,QAAQqC,KAAK,oBAAoBoC,wBAIrC,MAAMsL,EAAO7gB,KAAKwb,WAAWjG,GAE7BvV,KAAKsQ,GAAG8R,WAAWvB,EAAKvgB,OAAQugB,EAAKvC,QACrCte,KAAK0gB,QAAQpE,YAAcuE,EAAKvC,OAGhC,IAAIsE,EAAS,EACA,QAATjK,IAAgBiK,EAAS,GAChB,QAATjK,IAAgBiK,EAAS,GAChB,QAATjK,IAAgBiK,EAAS,GAE7B,MAAM9B,EAAOD,EAAKC,KAAO8B,EACnBrB,EAAoB,IAAXqB,EAAe,EAAIA,EAASA,EAAS,EAC9CpB,EAAoB,IAAXoB,EAAe,EAAa,EAATA,EAElC,IAAK,IAAIrgB,EAAI,EAAGA,EAAIqgB,EAAQrgB,IACxBvC,KAAKsQ,GAAGuS,oBAAoB1M,EAAW5T,EAAGue,EAAMD,EAAKlI,KAAMkI,EAAKS,WAAYT,EAAKU,OAASA,EAAQV,EAAKW,OAASjf,EAAIif,GACpHxhB,KAAKsQ,GAAGwS,wBAAwB3M,EAAW5T,GAI3CvC,KAAKsQ,GAAGmD,SAASgJ,oBAAoBtG,EAAW5T,EAAGse,EAAKa,QAC5D,IAIA1hB,KAAKwb,WAAWyG,OAAOjiB,KAAKsQ,GAAG8R,WAAWpiB,KAAKsQ,GAAG8Q,qBAAsBphB,KAAKwb,WAAWyG,MAAM3D,OACtG,CAEA,IAAA/M,EAAK,QAAEf,EAAO,KAAEC,EAAOzQ,KAAKsQ,GAAGI,YACvB1Q,KAAKsQ,GAAGmD,SAASgN,kBAAoB,GAAGzgB,KAAKgR,MAAMR,EAAQ6F,mBACtDrW,KAAKogB,KAAK5P,EAAQ6F,iBAAiBrW,KAAK0iB,UAAUlS,GACvDxQ,KAAKsQ,GAAGmD,SAASoJ,gBAAgB7c,KAAKogB,KAAK5P,EAAQ6F,iBACnDrW,KAAKsQ,GAAGmD,SAASgN,gBAAkB,GAAGzgB,KAAKgR,MAAMR,EAAQ6F,kBAI7D7F,EAAQoF,mBAAmB1D,SAAQ,CAACiE,GAAYZ,WAC5C,MAAMsL,EAAO7gB,KAAKwb,WAAWjG,GACzBsL,EAAKe,aAAa5hB,KAAK+hB,gBAAgBlB,EAAK,IAIpD,IAAIkC,EAAuB,EACvB/iB,KAAKwb,WAAWyG,OAAOtJ,OAAS3Y,KAAKsQ,GAAG6Q,eAAc4B,EAAuB,GAE7E/iB,KAAKgiB,YACDhiB,KAAKwb,WAAWyG,MAChBjiB,KAAKsQ,GAAGmD,SAASkJ,sBACblM,EACAzQ,KAAKqgB,UAAUE,MACfvgB,KAAKwb,WAAWyG,MAAMtJ,KACtB3Y,KAAKwb,WAAWyG,MAAMT,OAASxhB,KAAKqgB,UAAUC,MAAQyC,EACtD/iB,KAAKwgB,gBAGTxgB,KAAKsQ,GAAGmD,SAASiJ,oBAAoBjM,EAAMzQ,KAAKqgB,UAAUC,MAAOtgB,KAAKqgB,UAAUE,MAAOvgB,KAAKwgB,gBAG5FxgB,KAAKwb,WAAWyG,MAChBjiB,KAAKsQ,GAAG0S,aACJvS,EACAzQ,KAAKqgB,UAAUE,MACfvgB,KAAKwb,WAAWyG,MAAMtJ,KACtB3Y,KAAKwb,WAAWyG,MAAMT,OAASxhB,KAAKqgB,UAAUC,MAAQyC,GAG1D/iB,KAAKsQ,GAAG2S,WAAWxS,EAAMzQ,KAAKqgB,UAAUC,MAAOtgB,KAAKqgB,UAAUE,MAG1E,CAEA,WAAA2C,GAEI,MAAMrC,EAAO7gB,KAAKwb,WAAWhN,SAE7B,OAAIqS,EAAKE,KAAaF,EAClBX,OAAJ,GACApP,QAAQqC,KAAK,mDACL+M,GAAiB,EAC7B,CAEA,kBAAAiD,CAAmBtC,GACVA,IAAMA,EAAO7gB,KAAKkjB,eACvB,MAAME,EAAQvC,EAAKE,KAGbQ,EAASV,EAAKC,KAEf9gB,KAAKqjB,SACNrjB,KAAKqjB,OAAS,CACVvV,IAAK,IAAIW,EAAA,EACT9B,IAAK,IAAI8B,EAAA,EACT6U,OAAQ,IAAI7U,EAAA,EACZ/F,MAAO,IAAI+F,EAAA,EACX8U,OAAQC,MAIhB,MAAM1V,EAAM9N,KAAKqjB,OAAOvV,IAClBnB,EAAM3M,KAAKqjB,OAAO1W,IAClB2W,EAAStjB,KAAKqjB,OAAOC,OACrB5a,EAAQ1I,KAAKqjB,OAAO3a,MAE1BoF,EAAIzN,IAAKmjB,KACT7W,EAAItM,KAAKmjB,KAGT,IAAK,IAAIjhB,EAAI,EAAGkN,EAAI2T,EAAMtiB,OAAQyB,EAAIkN,EAAGlN,GAAKgf,EAAQ,CAClD,MAAMliB,EAAI+jB,EAAM7gB,GACVjD,EAAI8jB,EAAM7gB,EAAI,GACdhD,EAAI6jB,EAAM7gB,EAAI,GAEpBuL,EAAIzO,EAAIK,KAAKoO,IAAIzO,EAAGyO,EAAIzO,GACxByO,EAAIxO,EAAII,KAAKoO,IAAIxO,EAAGwO,EAAIxO,GACxBwO,EAAIvO,EAAIG,KAAKoO,IAAIvO,EAAGuO,EAAIvO,GAExBoN,EAAItN,EAAIK,KAAKiN,IAAItN,EAAGsN,EAAItN,GACxBsN,EAAIrN,EAAII,KAAKiN,IAAIrN,EAAGqN,EAAIrN,GACxBqN,EAAIpN,EAAIG,KAAKiN,IAAIpN,EAAGoN,EAAIpN,EAC5B,CAEAmJ,EAAMI,IAAI6D,EAAKmB,GACfwV,EAAO3a,IAAImF,EAAKnB,GAAK8W,OAAO,EAChC,CAEA,qBAAAC,CAAsB7C,GACbA,IAAMA,EAAO7gB,KAAKkjB,eACvB,MAAME,EAAQvC,EAAKE,KAGbQ,EAASV,EAAKC,KAEf9gB,KAAKqjB,QAAQrjB,KAAKmjB,mBAAmBtC,GAE1C,IAAI8C,EAAc,EAClB,IAAK,IAAIphB,EAAI,EAAGkN,EAAI2T,EAAMtiB,OAAQyB,EAAIkN,EAAGlN,GAAKgf,EAC1C9G,EAAS1W,UAAUqf,EAAO7gB,GAC1BohB,EAAcjkB,KAAKiN,IAAIgX,EAAa3jB,KAAKqjB,OAAOC,OAAOM,gBAAgBnJ,IAG3Eza,KAAKqjB,OAAOE,OAAS7jB,KAAKC,KAAKgkB,EACnC,CAEA,MAAA7K,GACI,IAAK,IAAI6H,KAAO3gB,KAAKogB,KACjBpgB,KAAKsQ,GAAGmD,SAASqJ,kBAAkB9c,KAAKogB,KAAKO,WACtC3gB,KAAKogB,KAAKO,GAErB,IAAK,IAAIA,KAAO3gB,KAAKwb,WACjBxb,KAAKsQ,GAAGuT,aAAa7jB,KAAKwb,WAAWmF,GAAKrC,eACnCte,KAAKwb,WAAWmF,EAE/B,EClSG,MAAMmD,UAAiB3D,EAC1B,WAAArgB,CAAYwQ,GAAI,WAAEkL,EAAa,CAAC,GAAM,CAAC,GACnC7J,OAAOC,OAAO4J,EAAY,CACtBhN,SAAU,CAAEsS,KAAM,EAAGC,KAAM,IAAI7H,aAAa,EAAE,GAAI,EAAG,GAAI,GAAI,EAAG,KAChE6K,GAAI,CAAEjD,KAAM,EAAGC,KAAM,IAAI7H,aAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,OAG1DnZ,MAAMuQ,EAAIkL,EACd,E,kCCVJ,MAAMwI,EAAQ,CACVC,MAAO,UACPC,MAAO,UACPC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,QAAS,UACTC,KAAM,UACNC,OAAQ,UACRC,OAAQ,WAGL,SAASC,EAASC,GACF,IAAfA,EAAI7jB,SAAc6jB,EAAMA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,IACtF,MAAMC,EAAM,4CAA4CC,KAAKF,GAE7D,OADKC,GAAK9T,QAAQqC,KAAK,gCAAgCwR,mBAChD,CAACG,SAASF,EAAI,GAAI,IAAM,IAAKE,SAASF,EAAI,GAAI,IAAM,IAAKE,SAASF,EAAI,GAAI,IAAM,IAC3F,CAOO,SAASG,EAAWtJ,GAEvB,YAAc7M,IAAV6M,EAA4B,CAAC,EAAG,EAAG,GAGd,IAArB/a,UAAUI,OAAqBJ,UAG9BskB,MAAMvJ,GAGM,MAAbA,EAAM,GAAmBiJ,EAASjJ,GAGlCuI,EAAMvI,EAAMwJ,eAAuBP,EAASV,EAAMvI,EAAMwJ,iBAE5DnU,QAAQqC,KAAK,+BACN,CAAC,EAAG,EAAG,KAtBU+R,EAaczJ,EAX/B,GADPyJ,EAAMJ,SAASI,KACE,GAAM,KAAO,KAAOA,GAAO,EAAK,KAAO,KAAY,IAANA,GAAa,MAFxE,IAAqBA,CAuB5B,CC9BO,MAAMC,UAActlB,MACvB,WAAAC,CAAY2b,GACR,OAAI5b,MAAM0Y,QAAQkD,GAAe1b,SAAS0b,GACnC1b,SAAS,KAAwBW,WAC5C,CAEA,KAAI0kB,GACA,OAAOplB,KAAK,EAChB,CAEA,KAAIqlB,GACA,OAAOrlB,KAAK,EAChB,CAEA,KAAIpB,GACA,OAAOoB,KAAK,EAChB,CAEA,KAAIolB,CAAExkB,GACFZ,KAAK,GAAKY,CACd,CAEA,KAAIykB,CAAEzkB,GACFZ,KAAK,GAAKY,CACd,CAEA,KAAIhC,CAAEgC,GACFZ,KAAK,GAAKY,CACd,CAEA,GAAAP,CAAIob,GACA,OAAI5b,MAAM0Y,QAAQkD,GAAezb,KAAKe,KAAK0a,GACpCzb,KAAKe,KAAK,KAAwBL,WAC7C,CAEA,IAAAK,CAAKH,GAID,OAHAZ,KAAK,GAAKY,EAAE,GACZZ,KAAK,GAAKY,EAAE,GACZZ,KAAK,GAAKY,EAAE,GACLZ,IACX,E,gDClDG,MAAMyO,UAAa5O,MACtB,WAAAC,CAAYT,EAAI,EAAGC,EAAID,EAAGE,EAAIF,GAE1B,OADAU,MAAMV,EAAGC,EAAGC,GACLS,IACX,CAEA,KAAIX,GACA,OAAOW,KAAK,EAChB,CAEA,KAAIV,GACA,OAAOU,KAAK,EAChB,CAEA,KAAIT,GACA,OAAOS,KAAK,EAChB,CAEA,KAAIX,CAAEuB,GACFZ,KAAK,GAAKY,CACd,CAEA,KAAItB,CAAEsB,GACFZ,KAAK,GAAKY,CACd,CAEA,KAAIrB,CAAEqB,GACFZ,KAAK,GAAKY,CACd,CAEA,GAAAP,CAAIhB,EAAGC,EAAID,EAAGE,EAAIF,GACd,OAAIA,EAAEyB,OAAed,KAAKe,KAAK1B,IAC/B,KAAaW,KAAMX,EAAGC,EAAGC,GAClBS,KACX,CAEA,IAAAe,CAAKH,GAED,OADA,IAAcZ,KAAMY,GACbZ,IACX,CAEA,GAAA2I,CAAI2c,EAAIC,GAGJ,OAFIA,EAAI,KAAavlB,KAAMslB,EAAIC,GAC1B,KAAavlB,KAAMA,KAAMslB,GACvBtlB,IACX,CAEA,GAAA8I,CAAIwc,EAAIC,GAGJ,OAFIA,EAAI,KAAkBvlB,KAAMslB,EAAIC,GAC/B,KAAkBvlB,KAAMA,KAAMslB,GAC5BtlB,IACX,CAEA,QAAAvB,CAASmC,GAGL,OAFIA,EAAEE,OAAQ,KAAkBd,KAAMA,KAAMY,GACvC,KAAeZ,KAAMA,KAAMY,GACzBZ,IACX,CAEA,MAAAyjB,CAAO7iB,GAGH,OAFIA,EAAEE,OAAQ,KAAgBd,KAAMA,KAAMY,GACrC,KAAeZ,KAAMA,KAAM,EAAIY,GAC7BZ,IACX,CAEA,OAAAsB,CAAQV,EAAIZ,MAER,OADA,KAAiBA,KAAMY,GAChBZ,IACX,CAGA,GAAAP,GACI,OAAO,KAAgBO,KAC3B,CAEA,QAAAwlB,CAAS5kB,GACL,OAAIA,EAAU,KAAkBZ,KAAMY,GAC1B,KAAgBZ,KAChC,CAEA,UAAAylB,GACI,OAAO,KAAuBzlB,KAClC,CAEA,eAAA4jB,CAAgBhjB,GACZ,OAAIA,EAAU,KAAyBZ,KAAMY,GACjC,KAAuBZ,KACvC,CAEA,MAAA0lB,CAAO9kB,EAAIZ,MAEP,OADA,KAAgBA,KAAMY,GACfZ,IACX,CAEA,KAAA2lB,CAAML,EAAIC,GAGN,OAFIA,EAAI,KAAevlB,KAAMslB,EAAIC,GAC5B,KAAevlB,KAAMA,KAAMslB,GACzBtlB,IACX,CAEA,KAAA0I,CAAM9H,GAEF,OADA,KAAeZ,KAAMA,KAAMY,GACpBZ,IACX,CAEA,SAAA+B,GAEI,OADA,KAAmB/B,KAAMA,MAClBA,IACX,CAEA,GAAA4B,CAAIhB,GACA,OAAO,KAAaZ,KAAMY,EAC9B,CAEA,MAAAglB,CAAOhlB,GACH,OAAO,KAAqBZ,KAAMY,EACtC,CAEA,YAAAilB,CAAaC,GAET,OADA,KAAuB9lB,KAAMA,KAAM8lB,GAC5B9lB,IACX,CAEA,YAAAyf,CAAasG,GAET,OADA,KAAuB/lB,KAAMA,KAAM+lB,GAC5B/lB,IACX,CAEA,kBAAAgmB,CAAmBD,GAEf,OADA,KAAyB/lB,KAAMA,KAAM+lB,GAC9B/lB,IACX,CAEA,eAAAimB,CAAgB1kB,GAEZ,OADA,KAAuBvB,KAAMA,KAAMuB,GAC5BvB,IACX,CAEA,KAAAkmB,CAAMtlB,GACF,OAAO,KAAeZ,KAAMY,EAChC,CAEA,IAAAulB,CAAKvlB,EAAG4C,GAEJ,OADA,KAAcxD,KAAMA,KAAMY,EAAG4C,GACtBxD,IACX,CAEA,UAAAomB,CAAWxlB,EAAGylB,EAAOC,GAEjB,OADA,KAAoBtmB,KAAMA,KAAMY,EAAGylB,EAAOC,GACnCtmB,IACX,CAEA,KAAAumB,GACI,OAAO,IAAI9X,EAAKzO,KAAK,GAAIA,KAAK,GAAIA,KAAK,GAC3C,CAEA,SAAA+D,CAAUpF,EAAGqF,EAAI,GAIb,OAHAhE,KAAK,GAAKrB,EAAEqF,GACZhE,KAAK,GAAKrB,EAAEqF,EAAI,GAChBhE,KAAK,GAAKrB,EAAEqF,EAAI,GACThE,IACX,CAEA,OAAAiE,CAAQtF,EAAI,GAAIqF,EAAI,GAIhB,OAHArF,EAAEqF,GAAKhE,KAAK,GACZrB,EAAEqF,EAAI,GAAKhE,KAAK,GAChBrB,EAAEqF,EAAI,GAAKhE,KAAK,GACTrB,CACX,CAEA,kBAAA6nB,CAAmBT,GACf,MAAM1mB,EAAIW,KAAK,GACTV,EAAIU,KAAK,GACTT,EAAIS,KAAK,GAMf,OAJAA,KAAK,GAAK+lB,EAAK,GAAK1mB,EAAI0mB,EAAK,GAAKzmB,EAAIymB,EAAK,GAAKxmB,EAChDS,KAAK,GAAK+lB,EAAK,GAAK1mB,EAAI0mB,EAAK,GAAKzmB,EAAIymB,EAAK,GAAKxmB,EAChDS,KAAK,GAAK+lB,EAAK,GAAK1mB,EAAI0mB,EAAK,GAAKzmB,EAAIymB,EAAK,IAAMxmB,EAE1CS,KAAK+B,WAChB,E,iPC9KG,SAASjB,EAAOnC,GACnB,IAAIU,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACV,OAAOe,KAAKC,KAAKN,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EACzC,CASO,SAASwB,EAAKrC,EAAKC,GAItB,OAHAD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACJD,CACX,CAWO,SAAS2B,EAAI3B,EAAKW,EAAGC,EAAGC,GAI3B,OAHAb,EAAI,GAAKW,EACTX,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACFb,CACX,CAUO,SAASiK,EAAIjK,EAAKC,EAAGC,GAIxB,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAAS0I,EAAS1I,EAAKC,EAAGC,GAI7B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAASD,EAASC,EAAKC,EAAGC,GAI7B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAAS+kB,EAAO/kB,EAAKC,EAAGC,GAI3B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAASgK,EAAMhK,EAAKC,EAAGC,GAI1B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EACTF,CACX,CASO,SAAS8mB,EAAS7mB,EAAGC,GACxB,IAAIS,EAAIT,EAAE,GAAKD,EAAE,GACbW,EAAIV,EAAE,GAAKD,EAAE,GACbY,EAAIX,EAAE,GAAKD,EAAE,GACjB,OAAOe,KAAKC,KAAKN,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EACzC,CASO,SAASqkB,EAAgBjlB,EAAGC,GAC/B,IAAIS,EAAIT,EAAE,GAAKD,EAAE,GACbW,EAAIV,EAAE,GAAKD,EAAE,GACbY,EAAIX,EAAE,GAAKD,EAAE,GACjB,OAAOU,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,CAC/B,CAQO,SAASknB,EAAc9nB,GAC1B,IAAIU,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACV,OAAOU,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,CAC/B,CASO,SAASmmB,EAAOhnB,EAAKC,GAIxB,OAHAD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACLD,CACX,CASO,SAAS4C,EAAQ5C,EAAKC,GAIzB,OAHAD,EAAI,GAAK,EAAMC,EAAE,GACjBD,EAAI,GAAK,EAAMC,EAAE,GACjBD,EAAI,GAAK,EAAMC,EAAE,GACVD,CACX,CASO,SAASqD,EAAUrD,EAAKC,GAC3B,IAAIU,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACNc,EAAMJ,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EAQ9B,OAPIE,EAAM,IAENA,EAAM,EAAIC,KAAKC,KAAKF,IAExBf,EAAI,GAAKC,EAAE,GAAKc,EAChBf,EAAI,GAAKC,EAAE,GAAKc,EAChBf,EAAI,GAAKC,EAAE,GAAKc,EACTf,CACX,CASO,SAASkD,EAAIjD,EAAGC,GACnB,OAAOD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,EAChD,CAUO,SAAS+mB,EAAMjnB,EAAKC,EAAGC,GAC1B,IAAIC,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPM,EAAKL,EAAE,GACPM,EAAKN,EAAE,GACPO,EAAKP,EAAE,GAKX,OAHAF,EAAI,GAAKI,EAAKK,EAAKJ,EAAKG,EACxBR,EAAI,GAAKK,EAAKE,EAAKJ,EAAKM,EACxBT,EAAI,GAAKG,EAAKK,EAAKJ,EAAKG,EACjBP,CACX,CAWO,SAASynB,EAAKznB,EAAKC,EAAGC,EAAG4E,GAC5B,IAAI3E,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GAIX,OAHAD,EAAI,GAAKG,EAAK2E,GAAK5E,EAAE,GAAKC,GAC1BH,EAAI,GAAKI,EAAK0E,GAAK5E,EAAE,GAAKE,GAC1BJ,EAAI,GAAKK,EAAKyE,GAAK5E,EAAE,GAAKG,GACnBL,CACX,CAYO,SAAS0nB,EAAW1nB,EAAKC,EAAGC,EAAGynB,EAAOC,GACzC,MAAMI,EAAMhnB,KAAKgnB,KAAKL,EAAQC,GAC9B,IAAIznB,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GAKX,OAHAD,EAAI,GAAKE,EAAE,IAAMC,EAAKD,EAAE,IAAM8nB,EAC9BhoB,EAAI,GAAKE,EAAE,IAAME,EAAKF,EAAE,IAAM8nB,EAC9BhoB,EAAI,GAAKE,EAAE,IAAMG,EAAKH,EAAE,IAAM8nB,EACvBhoB,CACX,CAWO,SAASioB,EAAcjoB,EAAKC,EAAGyD,GAClC,IAAI/C,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACNa,EAAI4C,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,IAAM7C,EAAI6C,EAAE,IAK5C,OAJA5C,EAAIA,GAAK,EACTd,EAAI,IAAM0D,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,EAAI6C,EAAE,KAAO5C,EACpDd,EAAI,IAAM0D,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,EAAI6C,EAAE,KAAO5C,EACpDd,EAAI,IAAM0D,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,IAAM7C,EAAI6C,EAAE,KAAO5C,EAC9Cd,CACX,CAMO,SAASkoB,EAAgBloB,EAAKC,EAAGyD,GACpC,IAAI/C,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACNa,EAAI4C,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,IAAM7C,EAAI6C,EAAE,IAK5C,OAJA5C,EAAIA,GAAK,EACTd,EAAI,IAAM0D,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,GAAKC,EAC5Cd,EAAI,IAAM0D,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,GAAKC,EAC5Cd,EAAI,IAAM0D,EAAE,GAAK/C,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,IAAM7C,GAAKC,EACtCd,CACX,CAUO,SAASmoB,EAAcnoB,EAAKC,EAAGyD,GAClC,IAAI/C,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GAIV,OAHAD,EAAI,GAAKW,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,EAAI6C,EAAE,GACrC1D,EAAI,GAAKW,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,EAAI6C,EAAE,GACrC1D,EAAI,GAAKW,EAAI+C,EAAE,GAAK9C,EAAI8C,EAAE,GAAK7C,EAAI6C,EAAE,GAC9B1D,CACX,CAUO,SAASooB,EAAcpoB,EAAKC,EAAG4C,GAGlC,IAAIlC,EAAIV,EAAE,GACNW,EAAIX,EAAE,GACNY,EAAIZ,EAAE,GACNooB,EAAKxlB,EAAE,GACPylB,EAAKzlB,EAAE,GACP0lB,EAAK1lB,EAAE,GAGP2lB,EAAMF,EAAKznB,EAAI0nB,EAAK3nB,EACpB6nB,EAAMF,EAAK5nB,EAAI0nB,EAAKxnB,EACpB6nB,EAAML,EAAKznB,EAAI0nB,EAAK3nB,EAEpBgoB,EAAOL,EAAKI,EAAMH,EAAKE,EACvBG,EAAOL,EAAKC,EAAMH,EAAKK,EACvBG,EAAOR,EAAKI,EAAMH,EAAKE,EAEvBM,EAAU,EAVLjmB,EAAE,GAsBX,OAXA2lB,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAER7oB,EAAI,GAAKW,EAAI6nB,EAAMG,EACnB3oB,EAAI,GAAKY,EAAI6nB,EAAMG,EACnB5oB,EAAI,GAAKa,EAAI6nB,EAAMG,EACZ7oB,CACX,CAQO,MAAMwnB,EAAQ,WACjB,MAAMuB,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAQ,CAAC,EAAG,EAAG,GAErB,OAAO,SAAU/oB,EAAGC,GAChBmC,EAAK0mB,EAAO9oB,GACZoC,EAAK2mB,EAAO9oB,GAEZmD,EAAU0lB,EAAOA,GACjB1lB,EAAU2lB,EAAOA,GAEjB,IAAIC,EAAS/lB,EAAI6lB,EAAOC,GAExB,OAAIC,EAAS,EACF,EACAA,GAAU,EACVjoB,KAAKkoB,GAELloB,KAAKoE,KAAK6jB,EAEzB,CACH,CArBoB,GA8Bd,SAASE,EAAYlpB,EAAGC,GAC3B,OAAOD,EAAE,KAAOC,EAAE,IAAMD,EAAE,KAAOC,EAAE,IAAMD,EAAE,KAAOC,EAAE,EACxD,C","sources":["webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/QuatFunc.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Vec4Func.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Quat.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Mat4Func.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Mat4.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Euler.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/EulerFunc.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Transform.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Mat3Func.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Mat3.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Mesh.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Program.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Renderer.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Geometry.js","webpack://my-3d-portfolio/./node_modules/ogl/src/extras/Triangle.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/ColorFunc.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Color.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Vec3.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Vec3Func.js"],"sourcesContent":["import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2', '3'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this._target);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this._target) {\n        QuatFunc.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this._target) {\n        QuatFunc.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this._target) {\n        QuatFunc.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this._target, qA, qB);\n        } else {\n            QuatFunc.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this._target, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler, isInternal) {\n        QuatFunc.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import * as vec3 from './Vec3Func.js';\n\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [1, 1, 1];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */\nexport function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = vec3.length([srcMat[0], srcMat[1], srcMat[2]]);\n    const sy = vec3.length([srcMat[4], srcMat[5], srcMat[6]]);\n    const sz = vec3.length([srcMat[8], srcMat[9], srcMat[10]]);\n\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n\n    getRotation(dstRotation, _m1);\n\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */\nexport function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n\n    const x = srcRotation[0],\n        y = srcRotation[1],\n        z = srcRotation[2],\n        w = srcRotation[3];\n    const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    const sx = srcScale[0],\n        sy = srcScale[1],\n        sz = srcScale[2];\n\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n\n    return te;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.compose(this, q, pos, scale);\n        return this;\n    }\n\n    decompose(q, pos, scale) {\n        Mat4Func.decompose(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation._target.onChange = () => this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = () => this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LEQUAL,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {}\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n\n        // Compile shaders with source\n        this.setShaders({ vertex, fragment });\n    }\n\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n\n        if(this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST)\n            else this.gl.renderer.disable(this.gl.STENCIL_TEST)\n\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask)\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass)\n\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let uniform = this.uniforms[activeUniform.uniformName];\n\n            for (const component of activeUniform.nameComponents) {\n                if (!uniform) break;\n\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 36306: // U_SAMPLER_2D\n        case 35680: // SAMPLER_CUBE\n        case 36289: // SAMPLER_2D_ARRAY\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    setStencilMask(value) {\n        if(this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value)\n    }\n\n    setStencilFunc(func, ref, mask) {\n\n        if((this.state.stencilFunc === func) &&\n            (this.state.stencilRef === ref) &&\n            (this.state.stencilFuncMask === mask)\n        ) return;\n\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n\n        if(this.state.stencilFail === stencilFail &&\n            this.state.stencilDepthFail === depthFail &&\n            this.state.stencilDepthPass === depthPass\n        ) return;\n\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        \n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n        \n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n\n            // Same for stencil\n            if(this.stencil || (!target || target.stencil)) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff)\n            }\n\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Triangle extends Geometry {\n    constructor(gl, { attributes = {} } = {}) {\n        Object.assign(attributes, {\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\n        });\n\n        super(gl, attributes);\n    }\n}\n","const NAMES = {\n    black: '#000000',\n    white: '#ffffff',\n    red: '#ff0000',\n    green: '#00ff00',\n    blue: '#0000ff',\n    fuchsia: '#ff00ff',\n    cyan: '#00ffff',\n    yellow: '#ffff00',\n    orange: '#ff8000',\n};\n\nexport function hexToRGB(hex) {\n    if (hex.length === 4) hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n    const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!rgb) console.warn(`Unable to convert hex string ${hex} to rgb values`);\n    return [parseInt(rgb[1], 16) / 255, parseInt(rgb[2], 16) / 255, parseInt(rgb[3], 16) / 255];\n}\n\nexport function numberToRGB(num) {\n    num = parseInt(num);\n    return [((num >> 16) & 255) / 255, ((num >> 8) & 255) / 255, (num & 255) / 255];\n}\n\nexport function parseColor(color) {\n    // Empty\n    if (color === undefined) return [0, 0, 0];\n\n    // Decimal\n    if (arguments.length === 3) return arguments;\n\n    // Number\n    if (!isNaN(color)) return numberToRGB(color);\n\n    // Hex\n    if (color[0] === '#') return hexToRGB(color);\n\n    // Names\n    if (NAMES[color.toLowerCase()]) return hexToRGB(NAMES[color.toLowerCase()]);\n\n    console.warn('Color format not recognised');\n    return [0, 0, 0];\n}\n","import * as ColorFunc from './functions/ColorFunc.js';\n\n// Color stored as an array of RGB decimal values (between 0 > 1)\n// Constructor and set method accept following formats:\n// new Color() - Empty (defaults to black)\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\n// new Color('#ff0000') - Hex string\n// new Color('#ccc') - Short-hand Hex string\n// new Color(0x4f27e8) - Number\n// new Color('red') - Color name string (short list in ColorFunc.js)\n\nexport class Color extends Array {\n    constructor(color) {\n        if (Array.isArray(color)) return super(...color);\n        return super(...ColorFunc.parseColor(...arguments));\n    }\n\n    get r() {\n        return this[0];\n    }\n\n    get g() {\n        return this[1];\n    }\n\n    get b() {\n        return this[2];\n    }\n\n    set r(v) {\n        this[0] = v;\n    }\n\n    set g(v) {\n        this[1] = v;\n    }\n\n    set b(v) {\n        this[2] = v;\n    }\n\n    set(color) {\n        if (Array.isArray(color)) return this.copy(color);\n        return this.copy(ColorFunc.parseColor(...arguments));\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        return this;\n    }\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    smoothLerp(v, decay, dt) {\n        Vec3Func.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */\nexport function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n"],"names":["multiply","out","a","b","ax","ay","az","aw","bx","by","bz","bw","x","y","z","w","len","Math","sqrt","Quat","Array","constructor","super","this","onChange","_target","triggerProps","Proxy","set","target","property","success","Reflect","arguments","includes","v","identity","length","copy","rotateX","rad","sin","cos","rotateY","rotateZ","inverse","q","a0","a1","a2","a3","dot","invDot","conjugate","normalize","qA","qB","fromMatrix3","matrix3","m","fRoot","fTrace","i","j","k","fromEuler","euler","isInternal","order","sx","cx","sy","cy","sz","cz","fromAxisAngle","axis","s","slerp","t","omega","cosom","sinom","scale0","scale1","acos","fromArray","o","toArray","determinant","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","getScaling","mat","m11","m12","m13","m21","m22","m23","m31","m32","m33","hypot","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","subtract","Mat4","m00","m01","m02","m03","m10","m20","m30","translate","rotate","c","b00","b01","b02","b10","b11","b12","b20","b21","b22","abs","scale","add","ma","mb","sub","fromPerspective","fov","aspect","near","far","fovy","f","tan","nf","fromOrthogonal","left","right","bottom","top","lr","bt","fromQuaternion","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","setPosition","b03","b04","b05","b06","b07","b08","b09","det","compose","pos","dstMat","srcRotation","srcTranslation","srcScale","te","xy","xz","yz","decompose","srcMat","dstRotation","dstTranslation","dstScale","_m1","slice","invSX","invSY","invSZ","getTranslation","getMaxScaleOnAxis","max","lookAt","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","tmpMat4","Euler","reorder","fromRotationMatrix","asin","min","atan2","Transform","parent","children","visible","matrix","worldMatrix","matrixAutoUpdate","worldMatrixNeedsUpdate","position","Vec3","quaternion","rotation","undefined","setParent","notifyParent","removeChild","addChild","child","notifyChild","indexOf","push","splice","updateMatrixWorld","force","updateMatrix","l","traverse","callback","invert","Mat3","fromMatrix4","fromBasis","vec3a","vec3b","vec3c","getNormalMatrix","ID","Mesh","gl","geometry","program","mode","TRIANGLES","frustumCulled","renderOrder","canvas","console","error","id","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","onBeforeRender","onAfterRender","draw","camera","uniforms","modelMatrix","Object","assign","value","viewMatrix","projectionMatrix","cameraPosition","worldPosition","forEach","mesh","flipFaces","cullFace","use","arrayCacheF32","Program","vertex","fragment","transparent","BACK","frontFace","CCW","depthTest","depthWrite","depthFunc","LEQUAL","warn","blendFunc","blendEquation","stencilFunc","stencilOp","src","renderer","premultipliedAlpha","setBlendFunc","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","setShaders","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformLocations","Map","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","name","split","match","uniformName","nameComponents","attributeLocations","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","location","getAttribLocation","attributeOrder","join","dst","srcAlpha","dstAlpha","setBlendEquation","modeRGB","modeAlpha","setStencilFunc","func","ref","mask","stencilRef","setStencilOp","stencilFail","depthFail","depthPass","applyState","enable","DEPTH_TEST","disable","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthMask","setDepthFunc","STENCIL_TEST","textureUnit","state","currentProgram","useProgram","activeUniform","component","isArray","texture","update","setUniform","type","textureUnits","CW","remove","deleteProgram","arrayLen","valueLen","Float32Array","flatten","setValue","get","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","warnCount","message","tempVec3","Renderer","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","preserveDrawingBuffer","powerPreference","autoClear","webgl","attributes","color","getContext","isWebgl2","setSize","ZERO","FUNC_ADD","depthMask","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","activeTextureUnit","boundBuffer","extensions","getExtension","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","style","setViewport","setScissor","scissor","blendFuncSeparate","blendEquationSeparate","setStencilMask","stencilMask","stencilFuncMask","ALWAYS","stencilDepthFail","stencilDepthPass","activeTexture","TEXTURE0","bindFramebuffer","FRAMEBUFFER","buffer","extension","webgl2Func","extFunc","bind","sortOpaque","zDepth","sortTransparent","sortUI","getRenderList","scene","frustumCull","sort","renderList","updateFrustum","node","frustumIntersectsMesh","opaque","ui","applyMatrix4","projectionViewMatrix","concat","render","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","ATTR_ID","isBoundsWarned","Geometry","VAOs","drawRange","start","count","instancedCount","currentGeometry","glState","key","addAttribute","attr","size","data","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","offset","byteLength","divisor","instanced","needsUpdate","usage","STATIC_DRAW","updateAttribute","isInstanced","index","isNewBuffer","createBuffer","bindBuffer","bufferData","bufferSubData","setIndex","setDrawRange","setInstancedCount","createVAO","bindAttributes","numLoc","vertexAttribPointer","enableVertexAttribArray","indexBytesPerElement","drawElements","drawArrays","getPosition","computeBoundingBox","array","bounds","center","radius","Infinity","divide","computeBoundingSphere","maxRadiusSq","squaredDistance","deleteBuffer","Triangle","uv","NAMES","black","white","red","green","blue","fuchsia","cyan","yellow","orange","hexToRGB","hex","rgb","exec","parseInt","parseColor","isNaN","toLowerCase","num","Color","r","g","va","vb","distance","squaredLen","negate","cross","equals","applyMatrix3","mat3","mat4","scaleRotateMatrix4","applyQuaternion","angle","lerp","smoothLerp","decay","dt","clone","transformDirection","squaredLength","exp","transformMat4","scaleRotateMat4","transformMat3","transformQuat","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","PI","exactEquals"],"sourceRoot":""}