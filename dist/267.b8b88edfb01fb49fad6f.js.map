{"version":3,"file":"267.b8b88edfb01fb49fad6f.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { gsap } from 'gsap';\r\nimport { throttle } from 'lodash';\r\n\r\nconst TitleBG = () => {\r\n  const containerRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\r\n    );\r\n    camera.position.z = 5;\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0);\r\n    renderer.outputEncoding = THREE.LinearSRGBColorSpace;\r\n    renderer.physicallyCorrectLights = true;\r\n\r\n    if (containerRef.current) {\r\n      containerRef.current.appendChild(renderer.domElement);\r\n    }\r\n\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Load manager\r\n    const loadingManager = new THREE.LoadingManager();\r\n\r\n    // Load textures\r\n    const textureLoader = new THREE.TextureLoader(loadingManager);\r\n    const matCapTexture = textureLoader.load('./assets/mattext.webp');\r\n    matCapTexture.wrapS = matCapTexture.wrapT = THREE.ClampToEdgeWrapping;\r\n\r\n    // Shader Material\r\n    const shaderMaterial = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        tMatCap: { value: matCapTexture },\r\n      },\r\n      vertexShader: `\r\n        varying vec3 vNormal;\r\n        void main() {\r\n          vNormal = normalize(normalMatrix * normal);\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D tMatCap;\r\n        varying vec3 vNormal;\r\n        void main() {\r\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\r\n          gl_FragColor = vec4(matCapColor, 1.0);\r\n        }\r\n      `\r\n    });\r\n\r\n    const bigSphere = new THREE.Mesh(new THREE.SphereGeometry(1.5, 32, 32), shaderMaterial);\r\n    const smallSphere = new THREE.Mesh(new THREE.SphereGeometry(0.5, 32, 32), shaderMaterial.clone());\r\n\r\n    const group = new THREE.Group();\r\n    group.add(bigSphere);\r\n    group.add(smallSphere);\r\n    scene.add(group);\r\n\r\n    bigSphereRef.current = bigSphere;\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    const handleMouseMove = throttle((event) => {\r\n      const mouseX = (event.clientX / window.innerWidth) * 2 - 1;\r\n      const mouseY = (event.clientY / window.innerHeight) * 2 - 1;\r\n      const radius = 1.6;\r\n      const angle = Math.atan2(mouseY, mouseX);\r\n      const targetX = radius * Math.cos(angle);\r\n      const targetY = radius * Math.sin(angle);\r\n\r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: -1,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n      gsap.to(camera.position, {\r\n        x: mouseX * 0.1,\r\n        y: mouseY * 0.1,\r\n        z: 5,\r\n        duration: 0.6,\r\n        ease: 'power3.out',\r\n      });\r\n    }, 100);\r\n\r\n    const handleResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    const animate = () => {\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    loadingManager.onLoad = () => {\r\n      setIsLoading(false);\r\n      gsap.fromTo(bigSphere.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1 });\r\n      gsap.fromTo(smallSphere.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1 });\r\n      animate();\r\n    };\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      window.removeEventListener('resize', handleResize);\r\n      renderer.dispose();\r\n\r\n      scene.traverse((child) => {\r\n        if (child.isMesh) {\r\n          child.geometry.dispose();\r\n          if (child.material.isMaterial) {\r\n            child.material.dispose();\r\n          }\r\n        }\r\n      });\r\n\r\n      if (renderer.domElement && containerRef.current) {\r\n        containerRef.current.removeChild(renderer.domElement);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={containerRef} id=\"hero\">\r\n      {isLoading && (\r\n        <div className=\"loading-screen\">\r\n          <h3>Loading...</h3>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBG;\r\n"],"names":["TitleBG","containerRef","useRef","rendererRef","cameraRef","sceneRef","bigSphereRef","smallSphereRef","isLoading","setIsLoading","useState","useEffect","scene","THREE","aspect","window","innerWidth","innerHeight","camera","position","z","renderer","antialias","alpha","setSize","setClearColor","outputEncoding","physicallyCorrectLights","current","appendChild","domElement","loadingManager","matCapTexture","load","wrapS","wrapT","shaderMaterial","uniforms","tMatCap","value","vertexShader","fragmentShader","bigSphere","smallSphere","clone","group","add","handleMouseMove","throttle","event","mouseX","clientX","mouseY","clientY","angle","Math","atan2","targetX","cos","targetY","sin","gsap","to","x","y","duration","ease","handleResize","left","right","top","bottom","updateProjectionMatrix","addEventListener","animate","render","requestAnimationFrame","onLoad","fromTo","scale","removeEventListener","dispose","traverse","child","isMesh","geometry","material","isMaterial","removeChild","React","ref","id","className"],"sourceRoot":""}